1 function_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
2 function_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
3 function_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
4 function_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
5 loopwhile4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
6 loopwhile4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
7 loopwhile4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
8 loopwhile4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
9 function_call8.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
10 function_call8.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
11 function_call8.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
12 loopwhile44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
13 loopwhile44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
14 loopwhile44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
15 fallback22.c
#include "vntlib.h"
KEY string s = "Fallback";
constructor Fallback2(){}
MUTABLE
uint64 test1(){
PrintStr("Fallback", "Fallback")
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
16 fallback22.c
#include "vntlib.h"
KEY string s = "Fallback";
constructor Fallback2(){}
MUTABLE
uint64 test1(){
PrintStr("Fallback", "Fallback")
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
17 fallback22.c
#include "vntlib.h"
KEY string s = "Fallback";
constructor Fallback2(){}
MUTABLE
uint64 test1(){
PrintStr("Fallback", "Fallback")
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
18 fallback22.c
#include "vntlib.h"
KEY string s = "Fallback";
constructor Fallback2(){}
MUTABLE
uint64 test1(){
PrintStr("Fallback", "Fallback")
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
19 fallback22.c
#include "vntlib.h"
KEY string s = "Fallback";
constructor Fallback2(){}
MUTABLE
uint64 test1(){
PrintStr("Fallback", "Fallback")
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
20 loopfor8.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint32 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
21 loopfor8.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint32 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
22 loopfor8.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint32 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
23 for777.c
#include "vntlib.h"
KEY uint256 count;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count", "count");
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
24 for777.c
#include "vntlib.h"
KEY uint256 count;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count", "count");
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
25 for777.c
#include "vntlib.h"
KEY uint256 count;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count", "count");
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
26 for777.c
#include "vntlib.h"
KEY uint256 count;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count", "count");
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
27 while3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
28 while3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
29 while3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
30 while3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
31 while3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
32 loopfor5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128");
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint128 test2() {
return test1();
}
1
---------------------------------
33 loopfor5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128");
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint128 test2() {
return test1();
}
1
---------------------------------
34 loopfor5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128");
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint128 test2() {
return test1();
}
1
---------------------------------
35 loopfor5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128");
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint128 test2() {
return test1();
}
1
---------------------------------
36 function_call9999.c
#include "vntlib.h"
constructor Function5(){
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test1() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint128T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
37 function_call9999.c
#include "vntlib.h"
constructor Function5(){
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test1() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint128T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
38 function_call9999.c
#include "vntlib.h"
constructor Function5(){
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test1() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint128T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
39 function_call9999.c
#include "vntlib.h"
constructor Function5(){
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test1() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint128T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
40 function_call9999.c
#include "vntlib.h"
constructor Function5(){
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test1() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint128T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
41 function_call9999.c
#include "vntlib.h"
constructor Function5(){
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test1() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint128T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
42 loopfor6.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
43 loopfor6.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
44 loopfor6.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
45 fallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
46 fallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
47 fallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
48 fallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
49 fallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
50 fallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
51 fallback333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint256 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
uint256 $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
return GetValue();
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to;
PrintStr("WithdrawTokenToHolder", "WithdrawTokenToHolder");
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
52 fallback333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint256 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
uint256 $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
return GetValue();
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to;
PrintStr("WithdrawTokenToHolder", "WithdrawTokenToHolder");
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
53 fallback333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint256 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
uint256 $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
return GetValue();
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to;
PrintStr("WithdrawTokenToHolder", "WithdrawTokenToHolder");
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
54 fallback333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint256 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
uint256 $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
return GetValue();
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to;
PrintStr("WithdrawTokenToHolder", "WithdrawTokenToHolder");
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
55 fallback333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint256 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
uint256 $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
return GetValue();
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to;
PrintStr("WithdrawTokenToHolder", "WithdrawTokenToHolder");
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
56 fallback333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint256 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
uint256 $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
return GetValue();
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to;
PrintStr("WithdrawTokenToHolder", "WithdrawTokenToHolder");
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
57 loopfunction_call3.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = amount;
uint32 c = test1(v)
return c;
}
1
---------------------------------
58 loopfunction_call3.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = amount;
uint32 c = test1(v)
return c;
}
1
---------------------------------
59 loopfunction_call3.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = amount;
uint32 c = test1(v)
return c;
}
1
---------------------------------
60 loopfunction_call3.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint32 test1(uint256 amount){
uint32 v = amount;
uint32 c = test1(v)
return c;
}
1
---------------------------------
61 loopfunction_call11111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 amount){
uint16 v = amount;
uint16 c = test2(amount, v);
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
62 loopfunction_call11111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 amount){
uint16 v = amount;
uint16 c = test2(amount, v);
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
63 loopfunction_call11111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 amount){
uint16 v = amount;
uint16 c = test2(amount, v);
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
64 loopfunction_call11111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 amount){
uint16 v = amount;
uint16 c = test2(amount, v);
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
65 loopfunction_call22.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
66 loopfunction_call22.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
67 loopfunction_call22.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
68 for4.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint32 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
69 for4.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint32 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
70 for4.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint32 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
71 for4.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint32 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
72 while6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
73 while6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
74 while6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
75 while6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
76 fallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint16 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint16 amount){
address from = GetSender();
uint16 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
77 fallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint16 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint16 amount){
address from = GetSender();
uint16 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
78 fallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint16 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint16 amount){
address from = GetSender();
uint16 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
79 fallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint16 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint16 amount){
address from = GetSender();
uint16 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
80 fallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint16 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint16 amount){
address from = GetSender();
uint16 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
81 fallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint16 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint16 amount){
address from = GetSender();
uint16 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
82 loopfallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
83 loopfallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
84 loopfallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
85 loopwhile8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
86 loopwhile8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
87 loopwhile8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
88 loopfor8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test(){
PrintStr("This is a double example","This is a double example")
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint128T("remark", j)
}
}
}
return count;
}
1
---------------------------------
89 loopfor8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test(){
PrintStr("This is a double example","This is a double example")
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint128T("remark", j)
}
}
}
return count;
}
1
---------------------------------
90 loopfor8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test(){
PrintStr("This is a double example","This is a double example")
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint128T("remark", j)
}
}
}
return count;
}
1
---------------------------------
91 loopfor8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test(){
PrintStr("This is a double example","This is a double example")
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint128T("remark", j)
}
}
}
return count;
}
1
---------------------------------
92 loopfor8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test(){
PrintStr("This is a double example","This is a double example")
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint128T("remark", j)
}
}
}
return count;
}
1
---------------------------------
93 loopfunction_call33.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = U256SafeMul(amount, amount);
uint64 c = test1(v)
return c;
}
1
---------------------------------
94 loopfunction_call33.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = U256SafeMul(amount, amount);
uint64 c = test1(v)
return c;
}
1
---------------------------------
95 loopfunction_call33.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = U256SafeMul(amount, amount);
uint64 c = test1(v)
return c;
}
1
---------------------------------
96 loopfunction_call33.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
uint64 v = U256SafeMul(amount, amount);
uint64 c = test1(v)
return c;
}
1
---------------------------------
97 loopfor77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
98 loopfor77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
99 loopfor77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
100 for8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test1(){
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint128T("remark", j)
}
}
}
return count;
}
0
---------------------------------
101 for8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test1(){
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint128T("remark", j)
}
}
}
return count;
}
0
---------------------------------
102 for8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test1(){
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint128T("remark", j)
}
}
}
return count;
}
0
---------------------------------
103 for8888.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For8(){
}
MUTABLE
uint128 test1(){
for (uint128 i = 100; i > 0; i--) {
for (uint128 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint128T("remark", j)
}
}
}
return count;
}
0
---------------------------------
104 fallback555.c
#include "vntlib.h"
KEY uint64 res = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint64 getRes(address addr) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
105 fallback555.c
#include "vntlib.h"
KEY uint64 res = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint64 getRes(address addr) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
106 fallback555.c
#include "vntlib.h"
KEY uint64 res = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint64 getRes(address addr) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
107 fallback555.c
#include "vntlib.h"
KEY uint64 res = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint64 getRes(address addr) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
108 while4444.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 1000;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
109 while4444.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 1000;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
110 while4444.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 1000;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
111 while4444.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 1000;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
112 for5.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For5(){
}
MUTABLE
uint32 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
113 for5.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For5(){
}
MUTABLE
uint32 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
114 for5.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For5(){
}
MUTABLE
uint32 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
115 for222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint256 GetCount() {
uint256 res = test1();
PrintUint256T("res", res);
return res;
}
0
---------------------------------
116 for222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint256 GetCount() {
uint256 res = test1();
PrintUint256T("res", res);
return res;
}
0
---------------------------------
117 for222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint256 GetCount() {
uint256 res = test1();
PrintUint256T("res", res);
return res;
}
0
---------------------------------
118 loopwhile7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
119 loopwhile7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
120 loopwhile7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
121 loopwhile7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
122 while3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string s1 = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
123 while3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string s1 = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
124 while3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string s1 = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
125 while3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string s1 = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
126 loopfunction_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint128 test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
return res;
}
MUTABLE
uint128 test2() {
uint128 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i++;
}
return i;
}
1
---------------------------------
127 loopfunction_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint128 test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
return res;
}
MUTABLE
uint128 test2() {
uint128 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i++;
}
return i;
}
1
---------------------------------
128 loopfunction_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint128 test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
return res;
}
MUTABLE
uint128 test2() {
uint128 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i++;
}
return i;
}
1
---------------------------------
129 loopfunction_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint128 test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
return res;
}
MUTABLE
uint128 test2() {
uint128 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i++;
}
return i;
}
1
---------------------------------
130 while88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
131 while88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
132 while88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
133 while88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
134 for33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
135 for33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
136 for33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
137 for33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
138 for33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
139 for88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
140 for88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
141 for88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
142 for88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
143 for88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
144 function_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
145 function_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
146 function_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
147 function_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
148 for77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64 > 1000")
for (uint64 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
149 for77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64 > 1000")
for (uint64 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
150 for77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64 > 1000")
for (uint64 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
151 for77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64 > 1000")
for (uint64 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
152 for77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64 > 1000")
for (uint64 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
153 while555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count++;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
154 while555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count++;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
155 while555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count++;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
156 while555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count++;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
157 while555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count++;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
158 while555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(count < res) {
count++;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
159 loopfunction_call66.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to, _value);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _to, uint256 _value) {
owner = GetSender();
balances.key = _owner;
while(owner != _to) {
transfer(_to, _value);
}
return balances.value;
}
1
---------------------------------
160 loopfunction_call66.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to, _value);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _to, uint256 _value) {
owner = GetSender();
balances.key = _owner;
while(owner != _to) {
transfer(_to, _value);
}
return balances.value;
}
1
---------------------------------
161 loopfunction_call66.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to, _value);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _to, uint256 _value) {
owner = GetSender();
balances.key = _owner;
while(owner != _to) {
transfer(_to, _value);
}
return balances.value;
}
1
---------------------------------
162 loopfor3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
163 loopfor3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
164 loopfor3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
165 loopfor3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
166 fallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
167 fallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
168 fallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
169 fallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
170 while33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
171 while33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
172 while33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
173 while33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
174 while33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
175 loopwhile2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(uint256 x){
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
176 loopwhile2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(uint256 x){
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
177 loopwhile2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(uint256 x){
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
178 loopwhile2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(uint256 x){
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
179 loopfunction_call1111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint128 amount){
uint128 v = amount;
uint128 c = test2(amount, v);
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
180 loopfunction_call1111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint128 amount){
uint128 v = amount;
uint128 c = test2(amount, v);
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
181 loopfunction_call1111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint128 amount){
uint128 v = amount;
uint128 c = test2(amount, v);
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
182 fallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
183 fallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
184 fallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
185 fallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
186 fallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
187 loopwhile6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
188 loopwhile6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
189 loopwhile6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
190 function_call3.c
#include "vntlib.h"
KEY uint32 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint32 test1(uint32 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
191 function_call3.c
#include "vntlib.h"
KEY uint32 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint32 test1(uint32 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
192 function_call3.c
#include "vntlib.h"
KEY uint32 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint32 test1(uint32 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
193 function_call3.c
#include "vntlib.h"
KEY uint32 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint32 test1(uint32 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
194 function_call3.c
#include "vntlib.h"
KEY uint32 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint32 test1(uint32 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
195 function_call3.c
#include "vntlib.h"
KEY uint32 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint32 test1(uint32 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
196 while11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("while", "while")
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
197 while11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("while", "while")
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
198 while11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("while", "while")
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
199 while11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("while", "while")
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
200 while11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("while", "while")
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
201 for11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){
}
MUTABLE
uint64 test1(){
PrintUint256T("get amount:", count);
for (uint16 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
202 for11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){
}
MUTABLE
uint64 test1(){
PrintUint256T("get amount:", count);
for (uint16 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
203 for11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){
}
MUTABLE
uint64 test1(){
PrintUint256T("get amount:", count);
for (uint16 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
204 for11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){
}
MUTABLE
uint64 test1(){
PrintUint256T("get amount:", count);
for (uint16 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
205 for11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){
}
MUTABLE
uint64 test1(){
PrintUint256T("get amount:", count);
for (uint16 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
206 fallback888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint64 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint64 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
PrintStr("queryAmount", "GetAmountFromAddress");
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
207 fallback888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint64 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint64 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
PrintStr("queryAmount", "GetAmountFromAddress");
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
208 fallback888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint64 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint64 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
PrintStr("queryAmount", "GetAmountFromAddress");
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
209 loopwhile1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
210 loopwhile1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
211 loopwhile1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
212 loopwhile1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
213 fallback33333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint16 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint16 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
214 fallback33333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint16 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint16 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
215 fallback33333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint16 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint16 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
216 fallback33333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint16 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
uint16 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
217 for5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
PrintStr("test()", "test()");
test1();
}
0
---------------------------------
218 for5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
PrintStr("test()", "test()");
test1();
}
0
---------------------------------
219 for5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
PrintStr("test()", "test()");
test1();
}
0
---------------------------------
220 for5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
PrintStr("test()", "test()");
test1();
}
0
---------------------------------
221 for5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
PrintStr("test()", "test()");
test1();
}
0
---------------------------------
222 for5555.c
#include "vntlib.h"
KEY uint128 count;
constructor For5(){
}
MUTABLE
uint128 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
PrintStr("test()", "test()");
test1();
}
0
---------------------------------
223 loopwhile666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test1()", "test1()")
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
224 loopwhile666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test1()", "test1()")
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
225 loopwhile666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test1()", "test1()")
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
226 loopfor555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint256 test2() {
return test1();
}
1
---------------------------------
227 loopfor555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint256 test2() {
return test1();
}
1
---------------------------------
228 loopfor555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint256 test2() {
return test1();
}
1
---------------------------------
229 loopfor555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint256 test2() {
return test1();
}
1
---------------------------------
230 loopfor555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint256 test2() {
return test1();
}
1
---------------------------------
231 loopfor555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
uint256 test2() {
return test1();
}
1
---------------------------------
232 fallback4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor Fallback4() {}
MUTABLE
void test1(uint128 amount){
for(uint32 i = 1; i< amount; i++) {
count += i;
}
}
_(){
PrintStr("fallback", "fallback");
test1(count);
}
0
---------------------------------
233 fallback4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor Fallback4() {}
MUTABLE
void test1(uint128 amount){
for(uint32 i = 1; i< amount; i++) {
count += i;
}
}
_(){
PrintStr("fallback", "fallback");
test1(count);
}
0
---------------------------------
234 fallback4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor Fallback4() {}
MUTABLE
void test1(uint128 amount){
for(uint32 i = 1; i< amount; i++) {
count += i;
}
}
_(){
PrintStr("fallback", "fallback");
test1(count);
}
0
---------------------------------
235 fallback4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor Fallback4() {}
MUTABLE
void test1(uint128 amount){
for(uint32 i = 1; i< amount; i++) {
count += i;
}
}
_(){
PrintStr("fallback", "fallback");
test1(count);
}
0
---------------------------------
236 loopfunction_call5.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
1
---------------------------------
237 loopfunction_call5.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
1
---------------------------------
238 loopfunction_call5.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
1
---------------------------------
239 while777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(res == 100) {
count++;
}
return count;
}
0
---------------------------------
240 while777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(res == 100) {
count++;
}
return count;
}
0
---------------------------------
241 while777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(res == 100) {
count++;
}
return count;
}
0
---------------------------------
242 while777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(res == 100) {
count++;
}
return count;
}
0
---------------------------------
243 while777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
MUTABLE
uint256 test1(uint256 res) {
EVENT_GETFINALCOUNT(count);
while(res == 100) {
count++;
}
return count;
}
0
---------------------------------
244 loopfunction_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("uint128", "uint128");
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
245 loopfunction_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("uint128", "uint128");
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
246 loopfunction_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("uint128", "uint128");
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
247 while111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("count == x", "count == x");
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
248 while111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("count == x", "count == x");
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
249 while111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("count == x", "count == x");
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
250 while111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("count == x", "count == x");
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
251 while111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("count == x", "count == x");
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
252 while6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
253 while6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
254 while6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
255 while6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
256 while6666.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While6(){
}
MUTABLE
uint128 test1(uint128 a, uint128 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
uint128 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
257 loopfunction_call66666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
258 loopfunction_call66666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
259 loopfunction_call66666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
260 loopfunction_call66666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
261 loopfor6666.c
#include "vntlib.h"
KEY uint128 count;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
262 loopfor6666.c
#include "vntlib.h"
KEY uint128 count;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
263 loopfor6666.c
#include "vntlib.h"
KEY uint128 count;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
264 loopfor66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test(){
PrintStr("For(;;)", "For(;;)")
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
265 loopfor66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test(){
PrintStr("For(;;)", "For(;;)")
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
266 loopfor66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test(){
PrintStr("For(;;)", "For(;;)")
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
267 loopfor66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test(){
PrintStr("For(;;)", "For(;;)")
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
268 while22.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While2(){}
MUTABLE
uint64 test1(){
PrintStr("while", "while")
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
269 while22.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While2(){}
MUTABLE
uint64 test1(){
PrintStr("while", "while")
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
270 while22.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While2(){}
MUTABLE
uint64 test1(){
PrintStr("while", "while")
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
271 loopfor4.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint32 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
272 loopfor4.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint32 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
273 loopfor4.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint32 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
274 loopfor4.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint32 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
275 loopfor4.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint32 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint32 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
276 while33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uint64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
277 while33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uint64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
278 while33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uint64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
279 while33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uint64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
280 fallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
281 fallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
282 fallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
283 fallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
284 fallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
285 loopwhile7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
286 loopwhile7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
287 loopwhile7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
288 loopfor7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
289 loopfor7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
290 loopfor7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
291 loopfunction_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
292 loopfunction_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
293 loopfunction_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
294 function_call3333.c
#include "vntlib.h"
KEY uint128 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint128 test1(uint128 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
295 function_call3333.c
#include "vntlib.h"
KEY uint128 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint128 test1(uint128 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
296 function_call3333.c
#include "vntlib.h"
KEY uint128 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint128 test1(uint128 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
297 function_call99.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
uint64 ai = test2();
return ai;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
0
---------------------------------
298 function_call99.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
uint64 ai = test2();
return ai;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
0
---------------------------------
299 function_call99.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
uint64 ai = test2();
return ai;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
0
---------------------------------
300 function_call99.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
uint64 ai = test2();
return ai;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
0
---------------------------------
301 for4444.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint128 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint128 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
302 for4444.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint128 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint128 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
303 for4444.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint128 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint128 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
304 for4444.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint128 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint128 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
305 for4444.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint128 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint128 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
306 for4444.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint128 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint128 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
307 loopfor77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64")
for (uint64 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
308 loopfor77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64")
for (uint64 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
309 loopfor77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64")
for (uint64 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
310 loopfor77.c
#include "vntlib.h"
KEY uint64 count;
constructor For7(){}
MUTABLE
uint64 test1(){
PrintStr("uint64", "uint64")
for (uint64 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
311 loopfallback888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint64 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint64 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint64 queryAmount(address to) {
PrintStr("GetAmountFromAddress", "GetAmountFromAddress")
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
312 loopfallback888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint64 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint64 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint64 queryAmount(address to) {
PrintStr("GetAmountFromAddress", "GetAmountFromAddress")
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
313 loopfallback888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint64 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint64 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint64 queryAmount(address to) {
PrintStr("GetAmountFromAddress", "GetAmountFromAddress")
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
314 function_call77777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
315 function_call77777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
316 function_call77777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
317 for77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
318 for77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
319 for77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
320 for77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
321 for77777.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For7(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
322 fallback444.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "count");
for(uint32 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
0
---------------------------------
323 fallback444.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "count");
for(uint32 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
0
---------------------------------
324 fallback444.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "count");
for(uint32 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
0
---------------------------------
325 fallback444.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "count");
for(uint32 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
0
---------------------------------
326 loopfunction_call222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
327 loopfunction_call222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
328 loopfunction_call222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
329 loopfunction_call222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
330 while2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
331 while2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
332 while2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
333 while2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
334 while2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
335 while2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint32 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
336 loopfor88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
337 loopfor88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
338 loopfor88.c
#include "vntlib.h"
KEY uint64 count;
constructor For8(){}
MUTABLE
uint64 test1(){
PrintStr("Double For", "Double For")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
339 loopfunction_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return a;
}
1
---------------------------------
340 loopfunction_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return a;
}
1
---------------------------------
341 loopfunction_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return a;
}
1
---------------------------------
342 loopfunction_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return a;
}
1
---------------------------------
343 loopfunction_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return a;
}
1
---------------------------------
344 loopfor2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
uint128 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint128 GetCount() {
PrintStr("test1()", "test1()")
return test1();
}
1
---------------------------------
345 loopfor2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
uint128 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint128 GetCount() {
PrintStr("test1()", "test1()")
return test1();
}
1
---------------------------------
346 loopfor2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
uint128 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint128 GetCount() {
PrintStr("test1()", "test1()")
return test1();
}
1
---------------------------------
347 for3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
348 for3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
349 for3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
350 for3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
351 for3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
352 loopwhile555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
353 loopwhile555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
354 loopwhile555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
355 loopwhile555.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
356 loopfallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
357 loopfallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
358 loopfallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
359 loopfallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
360 function_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i";
}
0
---------------------------------
361 function_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i";
}
0
---------------------------------
362 function_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i";
}
0
---------------------------------
363 function_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i";
}
0
---------------------------------
364 function_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i";
}
0
---------------------------------
365 while4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
366 while4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
367 while4.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
368 for55.c
#include "vntlib.h"
KEY uint64 count;
constructor For5(){
}
void test1() {
PrintStr("test1()", "test1()")
test2();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k == 1; k++) {
count++;
}
return count;
}
0
---------------------------------
369 for55.c
#include "vntlib.h"
KEY uint64 count;
constructor For5(){
}
void test1() {
PrintStr("test1()", "test1()")
test2();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k == 1; k++) {
count++;
}
return count;
}
0
---------------------------------
370 for55.c
#include "vntlib.h"
KEY uint64 count;
constructor For5(){
}
void test1() {
PrintStr("test1()", "test1()")
test2();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k == 1; k++) {
count++;
}
return count;
}
0
---------------------------------
371 for55.c
#include "vntlib.h"
KEY uint64 count;
constructor For5(){
}
void test1() {
PrintStr("test1()", "test1()")
test2();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k == 1; k++) {
count++;
}
return count;
}
0
---------------------------------
372 loopwhile888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
uint64 delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return voters[to].weight;
}
1
---------------------------------
373 loopwhile888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
uint64 delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return voters[to].weight;
}
1
---------------------------------
374 loopwhile888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
uint64 delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return voters[to].weight;
}
1
---------------------------------
375 loopwhile888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
uint64 delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return voters[to].weight;
}
1
---------------------------------
376 while444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("getFinalCount", "getFinalCount");
while(count < res) {
count += 2;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
377 while444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("getFinalCount", "getFinalCount");
while(count < res) {
count += 2;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
378 while444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("getFinalCount", "getFinalCount");
while(count < res) {
count += 2;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
379 while444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("getFinalCount", "getFinalCount");
while(count < res) {
count += 2;
}
return count；
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
380 loopfunction_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint128 a = 20;
PrintUint128T("a:", a);
uint128 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
PrintStr("while loop", "while loop");
}
1
---------------------------------
381 loopfunction_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint128 a = 20;
PrintUint128T("a:", a);
uint128 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
PrintStr("while loop", "while loop");
}
1
---------------------------------
382 loopfunction_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint128 a = 20;
PrintUint128T("a:", a);
uint128 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
PrintStr("while loop", "while loop");
}
1
---------------------------------
383 loopfunction_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint128 a = 20;
PrintUint128T("a:", a);
uint128 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
PrintStr("while loop", "while loop");
}
1
---------------------------------
384 while11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){}
MUTABLE
uint16 test1(uint16 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
385 while11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){}
MUTABLE
uint16 test1(uint16 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
386 while11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){}
MUTABLE
uint16 test1(uint16 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
387 while11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){}
MUTABLE
uint16 test1(uint16 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
388 fallback3.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
389 fallback3.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
390 fallback3.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void changOwner(address addr) {
newOwner = addr;
}
void confirmOwner() {
if (GetSender() == newOwner) {
owner = newOwner;
}
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
391 loopfunction_call22222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test1(e);
return res;
}
1
---------------------------------
392 loopfunction_call22222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test1(e);
return res;
}
1
---------------------------------
393 loopfunction_call22222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test1(e);
return res;
}
1
---------------------------------
394 loopfunction_call22222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint16 test1(uint256 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint256 b, uint256 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test1(e);
return res;
}
1
---------------------------------
395 loopfunction_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
396 loopfunction_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
397 loopfunction_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
398 loopwhile55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("do While", "do While")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
399 loopwhile55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("do While", "do While")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
400 loopwhile55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("do While", "do While")
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
401 loopfallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
uint256 res = test1();
PrintUint256T("uint256", res);
}
}
1
---------------------------------
402 loopfallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
uint256 res = test1();
PrintUint256T("uint256", res);
}
}
1
---------------------------------
403 loopfallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
uint256 res = test1();
PrintUint256T("uint256", res);
}
}
1
---------------------------------
404 fallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes()", "getRes()");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
405 fallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes()", "getRes()");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
406 fallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes()", "getRes()");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
407 fallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes()", "getRes()");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
408 fallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes()", "getRes()");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
PrintStr("fallback", "fallback");
test1();
}
0
---------------------------------
409 loopwhile333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("while()", "while()")
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
410 loopwhile333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("while()", "while()")
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
411 loopwhile333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("while()", "while()")
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
412 loopfor777.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count","count")
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
413 loopfor777.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count","count")
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
414 loopfor777.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count","count")
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
415 loopfor777.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint256 test1(){
PrintStr("count","count")
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
416 loopwhile4444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
EVENT_GETFINALCOUNT(count);
return count;
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
417 loopwhile4444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
EVENT_GETFINALCOUNT(count);
return count;
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
418 loopwhile4444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint128 test1(uint256 res) {
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
EVENT_GETFINALCOUNT(count);
return count;
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
419 function_call9.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:", "recurrent times");
}
MUTABLE
uint256 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
420 function_call9.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:", "recurrent times");
}
MUTABLE
uint256 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
421 function_call9.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:", "recurrent times");
}
MUTABLE
uint256 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
422 function_call9.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:", "recurrent times");
}
MUTABLE
uint256 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
423 loopfunction_call3333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint128 test1(uint256 amount){
uint128 v = amount;
PrintStr("self call", "self call");
uint128 c = test1(v)
return c;
}
1
---------------------------------
424 loopfunction_call3333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint128 test1(uint256 amount){
uint128 v = amount;
PrintStr("self call", "self call");
uint128 c = test1(v)
return c;
}
1
---------------------------------
425 loopfunction_call3333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint128 test1(uint256 amount){
uint128 v = amount;
PrintStr("self call", "self call");
uint128 c = test1(v)
return c;
}
1
---------------------------------
426 loopfallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
427 loopfallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
428 loopfallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
429 loopfor888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint256 test(){
PrintStr("This is a double example","This is a double example")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
430 loopfor888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint256 test(){
PrintStr("This is a double example","This is a double example")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
431 loopfor888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint256 test(){
PrintStr("This is a double example","This is a double example")
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
432 loopfor33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
433 loopfor33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
434 loopfor33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
435 loopfor33.c
#include "vntlib.h"
KEY uint64 count;
EVENT EVENT_TEST();
constructor For3(){}
MUTABLE
uint64 test(){
EVENT_TEST();
for(uint32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
436 loopfunction_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
437 loopfunction_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
438 loopfunction_call7.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
439 loopfor55.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){}
void test1() {
PrintStr("Test()", "Call Test")
test1();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
1
---------------------------------
440 loopfor55.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){}
void test1() {
PrintStr("Test()", "Call Test")
test1();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
1
---------------------------------
441 loopfor55.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){}
void test1() {
PrintStr("Test()", "Call Test")
test1();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
1
---------------------------------
442 loopfor55.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){}
void test1() {
PrintStr("Test()", "Call Test")
test1();
}
MUTABLE
uint64 test2(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
1
---------------------------------
443 while1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){
}
MUTABLE
uint128 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
444 while1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){
}
MUTABLE
uint128 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
445 while1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){
}
MUTABLE
uint128 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
446 while1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){
}
MUTABLE
uint128 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
447 while1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){
}
MUTABLE
uint128 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
448 function_call22.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
449 function_call22.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
450 function_call22.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
451 function_call22.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
452 function_call22.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint64 test1(uint256 a){
v = U256SafeMul(a, a);
c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint64 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
453 fallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
454 fallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
455 fallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
456 fallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
457 fallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
458 loopfor5.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For5(){
}
MUTABLE
uint32 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
459 loopfor5.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For5(){
}
MUTABLE
uint32 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
460 loopfor5.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For5(){
}
MUTABLE
uint32 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
461 loopfunction_call8.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
462 loopfunction_call8.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
463 loopfunction_call8.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
464 loopfor3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint128T("count:", count);
}
return count;
}
1
---------------------------------
465 loopfor3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint128T("count:", count);
}
return count;
}
1
---------------------------------
466 loopfor3333.c
#include "vntlib.h"
KEY uint128 count;
constructor For3(){
}
MUTABLE
uint128 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint128T("count:", count);
}
return count;
}
1
---------------------------------
467 loopfallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
468 loopfallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
469 loopfallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
470 loopfallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
471 loopfallback6.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint256 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
472 loopwhile22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(uint16 x){
while (count <= 100)
PrintUint16T("count:", count);
count++;
return count
}
1
---------------------------------
473 loopwhile22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(uint16 x){
while (count <= 100)
PrintUint16T("count:", count);
count++;
return count
}
1
---------------------------------
474 loopwhile22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(uint16 x){
while (count <= 100)
PrintUint16T("count:", count);
count++;
return count
}
1
---------------------------------
475 loopwhile22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(uint16 x){
while (count <= 100)
PrintUint16T("count:", count);
count++;
return count
}
1
---------------------------------
476 loopfunction_call333.c
#include "vntlib.h"
KEY uint256 v;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test1(v)
return c;
}
1
---------------------------------
477 loopfunction_call333.c
#include "vntlib.h"
KEY uint256 v;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test1(v)
return c;
}
1
---------------------------------
478 loopfunction_call333.c
#include "vntlib.h"
KEY uint256 v;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test1(v)
return c;
}
1
---------------------------------
479 loopfunction_call333.c
#include "vntlib.h"
KEY uint256 v;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test1(v)
return c;
}
1
---------------------------------
480 fallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(){
uint128 amount = 100;
uint128 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
481 fallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(){
uint128 amount = 100;
uint128 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
482 fallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(){
uint128 amount = 100;
uint128 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
483 fallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(){
uint128 amount = 100;
uint128 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
484 fallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(){
uint128 amount = 100;
uint128 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
485 loopfallback4.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
486 loopfallback4.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
487 loopfallback4.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
488 while66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint16 a, uint16 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
489 while66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint16 a, uint16 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
490 while66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint16 a, uint16 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
491 while66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint16 a, uint16 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
492 while66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint16 a, uint16 b) {
while (b < a) {
count++;
a -= b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
493 function_call5.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
494 function_call5.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
495 function_call5.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
496 for2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint128 GetCount() {
return test1();
}
0
---------------------------------
497 for2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint128 GetCount() {
return test1();
}
0
---------------------------------
498 for2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint128 GetCount() {
return test1();
}
0
---------------------------------
499 for2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For2(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint128 GetCount() {
return test1();
}
0
---------------------------------
500 while222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){}
MUTABLE
uint256 test1(){
PrintStr("test()", "test()");
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
501 while222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){}
MUTABLE
uint256 test1(){
PrintStr("test()", "test()");
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
502 while222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){}
MUTABLE
uint256 test1(){
PrintStr("test()", "test()");
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
503 while222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){}
MUTABLE
uint256 test1(){
PrintStr("test()", "test()");
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
504 while222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){}
MUTABLE
uint256 test1(){
PrintStr("test()", "test()");
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
505 while222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){}
MUTABLE
uint256 test1(){
PrintStr("test()", "test()");
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
506 loopfallback66.c
#include "vntlib.h"
KEY uint256 amount = 1000000000;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test();
PrintUint256T("uint256", res);
}
1
---------------------------------
507 loopfallback66.c
#include "vntlib.h"
KEY uint256 amount = 1000000000;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test();
PrintUint256T("uint256", res);
}
1
---------------------------------
508 loopfallback66.c
#include "vntlib.h"
KEY uint256 amount = 1000000000;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test();
PrintUint256T("uint256", res);
}
1
---------------------------------
509 loopwhile11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("While", "while")
while(true) {
count = x;
}
return count;
}
1
---------------------------------
510 loopwhile11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("While", "while")
while(true) {
count = x;
}
return count;
}
1
---------------------------------
511 loopwhile11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("While", "while")
while(true) {
count = x;
}
return count;
}
1
---------------------------------
512 loopwhile11.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While1(){
}
MUTABLE
uint64 test(uint64 x){
PrintStr("While", "while")
while(true) {
count = x;
}
return count;
}
1
---------------------------------
513 function_call33.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
v = amount;
vv = test1(amount);
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(vv, v);
return account.value;
}
UNMUTABLE
uint256 test1(uint256 amount){
if (amount > 50) {
return amount;
} else {
return U256SafeAdd(amount, amount);
}
}
0
---------------------------------
514 function_call33.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
v = amount;
vv = test1(amount);
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(vv, v);
return account.value;
}
UNMUTABLE
uint256 test1(uint256 amount){
if (amount > 50) {
return amount;
} else {
return U256SafeAdd(amount, amount);
}
}
0
---------------------------------
515 function_call33.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
v = amount;
vv = test1(amount);
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(vv, v);
return account.value;
}
UNMUTABLE
uint256 test1(uint256 amount){
if (amount > 50) {
return amount;
} else {
return U256SafeAdd(amount, amount);
}
}
0
---------------------------------
516 function_call33.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
v = amount;
vv = test1(amount);
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(vv, v);
return account.value;
}
UNMUTABLE
uint256 test1(uint256 amount){
if (amount > 50) {
return amount;
} else {
return U256SafeAdd(amount, amount);
}
}
0
---------------------------------
517 function_call33.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint64 test1(uint256 amount){
v = amount;
vv = test1(amount);
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(vv, v);
return account.value;
}
UNMUTABLE
uint256 test1(uint256 amount){
if (amount > 50) {
return amount;
} else {
return U256SafeAdd(amount, amount);
}
}
0
---------------------------------
518 function_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
PrintUint256T("minutes", minutes);
return minutes;
}
0
---------------------------------
519 function_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
PrintUint256T("minutes", minutes);
return minutes;
}
0
---------------------------------
520 function_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
PrintUint256T("minutes", minutes);
return minutes;
}
0
---------------------------------
521 function_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
PrintUint256T("minutes", minutes);
return minutes;
}
0
---------------------------------
522 function_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
PrintUint256T("minutes", minutes);
return minutes;
}
0
---------------------------------
523 while8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
524 while8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
525 while8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
526 while8.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
void giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
}
void delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
0
---------------------------------
527 loopfallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint256", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
test1();
}
1
---------------------------------
528 loopfallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint256", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
test1();
}
1
---------------------------------
529 loopfallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint256", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
test1();
}
1
---------------------------------
530 loopfor7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
531 loopfor7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
532 loopfor7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
533 loopfor7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i++) {
count++;
}
return count;
}
1
---------------------------------
534 for7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
535 for7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
536 for7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
537 for7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
538 for7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
539 for7777.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For7(){
}
MUTABLE
uint128 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
540 loopfunction_call666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
uint256 test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
return _value
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
1
---------------------------------
541 loopfunction_call666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
uint256 test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
return _value
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
1
---------------------------------
542 loopfunction_call666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
uint256 test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
return _value
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
1
---------------------------------
543 loopfallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
544 loopfallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
545 loopfallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
546 loopfallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
547 loopfunction_call2222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test1(e);
return res;
}
1
---------------------------------
548 loopfunction_call2222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test1(e);
return res;
}
1
---------------------------------
549 loopfunction_call2222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test1(e);
return res;
}
1
---------------------------------
550 loopfunction_call2222.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint128 test1(uint256 a){
PrintStr("v = a", "v = a");
v = a;
c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test1(e);
return res;
}
1
---------------------------------
551 while888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
address giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
return chairperson;
}
uint64 delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return sender.value.weight;
}
0
---------------------------------
552 while888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
address giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
return chairperson;
}
uint64 delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return sender.value.weight;
}
0
---------------------------------
553 while888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
address giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
return chairperson;
}
uint64 delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return sender.value.weight;
}
0
---------------------------------
554 while888.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
constructor vote(array(string) proposalNames){
chairperson = GetSender();
voters.key = chairperson;
voters.value.weight = 1;
proposalNames.length = 32;
for(uint64 i = 0; i < proposalNames.length; i++) {
proposalNames.index = i;
proposalNames.value = "proposalName" + FromU64(i);
proposals.length = 100;
proposals.index = i;
proposals.value.name = proposalNames.value;
proposals.value.voteCount = 0;
}
}
address giveRightToVote(address voter) {
require(GetSender() == chairperson, "Only chairperson can give right to vote.");
require(!voters[voter].value.voted, "The voter already voted.");
require(voters[voter].value.weight == 0);
voters[voter].value.weight = 1;
return chairperson;
}
uint64 delegate(address to) {
sender = GetSender();
require(!sender.value.voted, "you already voted");
require(to != GetSender(), "Self-delegation is disallowed.");
while(voters[to].delegate != sender){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
return sender.value.weight;
}
0
---------------------------------
555 function_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
556 function_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
557 function_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
558 function_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
559 fallback3333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint128 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
uint128 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
560 fallback3333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint128 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
uint128 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
561 fallback3333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint128 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
uint128 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
562 fallback3333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint128 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
uint128 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
563 fallback3333.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint128 MinDeposit;
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
uint128 initTokenBank() {
owner = GetSender();
MinDeposit = 1;
return MinDeposit;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawTokenToHolder(address _to, uint _amount) {
holders.key = to
if(holders.value > 0) {
holders.value = 0;
SendFromContract(to, amount);
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
564 loopfunction_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
565 loopfunction_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
566 loopfunction_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
567 for888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){}
MUTABLE
uint256 test1(){
PrintStr("This is a double example", "This is a double example");
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
568 for888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){}
MUTABLE
uint256 test1(){
PrintStr("This is a double example", "This is a double example");
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
569 for888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){}
MUTABLE
uint256 test1(){
PrintStr("This is a double example", "This is a double example");
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
570 for888.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){}
MUTABLE
uint256 test1(){
PrintStr("This is a double example", "This is a double example");
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
571 while55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
572 while55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
573 while55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
574 while55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
575 while55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
576 while55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
577 while44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintSrt("while", "while")
while(count < res) {
count += 2;
}
return count
}
0
---------------------------------
578 while44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintSrt("while", "while")
while(count < res) {
count += 2;
}
return count
}
0
---------------------------------
579 while44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintSrt("while", "while")
while(count < res) {
count += 2;
}
return count
}
0
---------------------------------
580 while44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 1000;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintSrt("while", "while")
while(count < res) {
count += 2;
}
return count
}
0
---------------------------------
581 loopwhile5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
582 loopwhile5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
583 loopwhile5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
584 loopwhile5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
585 for111.c
#include "vntlib.h"
KEY uint256 count;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
586 for111.c
#include "vntlib.h"
KEY uint256 count;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
587 for111.c
#include "vntlib.h"
KEY uint256 count;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
588 for111.c
#include "vntlib.h"
KEY uint256 count;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
589 loopfunction_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
PrintStr("v = a", "v = a")
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
590 loopfunction_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
PrintStr("v = a", "v = a")
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
591 loopfunction_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
PrintStr("v = a", "v = a")
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
592 loopfunction_call777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
PrintStr("v = a", "v = a")
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
593 loopfallback1111.c
#include "vntlib.h"
KEY uint128 count = U128(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U128(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
594 loopfallback1111.c
#include "vntlib.h"
KEY uint128 count = U128(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U128(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
595 loopfallback1111.c
#include "vntlib.h"
KEY uint128 count = U128(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U128(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
596 loopfallback1111.c
#include "vntlib.h"
KEY uint128 count = U128(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U128(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
597 loopfunction_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
return i;
}
1
---------------------------------
598 loopfunction_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
return i;
}
1
---------------------------------
599 loopfunction_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
return i;
}
1
---------------------------------
600 loopfunction_call44.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(){
uint256 res = test2(params);
PrintUint256T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
return i;
}
1
---------------------------------
601 for66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test1(){
PrintStr("uint8", "uint8 > 250")
for (uint8 i =0; i < 250; i++) {
count++;
}
return count;
}
0
---------------------------------
602 for66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test1(){
PrintStr("uint8", "uint8 > 250")
for (uint8 i =0; i < 250; i++) {
count++;
}
return count;
}
0
---------------------------------
603 for66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test1(){
PrintStr("uint8", "uint8 > 250")
for (uint8 i =0; i < 250; i++) {
count++;
}
return count;
}
0
---------------------------------
604 for66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test1(){
PrintStr("uint8", "uint8 > 250")
for (uint8 i =0; i < 250; i++) {
count++;
}
return count;
}
0
---------------------------------
605 for66.c
#include "vntlib.h"
KEY uint64 count;
constructor For6(){}
MUTABLE
uint64 test1(){
PrintStr("uint8", "uint8 > 250")
for (uint8 i =0; i < 250; i++) {
count++;
}
return count;
}
0
---------------------------------
606 loopfunction_call6666.c
#include "vntlib.h"
KEY mapping (address, uint128) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
bool test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
return true;
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
607 loopfunction_call6666.c
#include "vntlib.h"
KEY mapping (address, uint128) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
bool test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
return true;
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
608 loopfunction_call6666.c
#include "vntlib.h"
KEY mapping (address, uint128) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
bool test(address _to, uint256 _value) {
owner = GetSender();
Require(owner != _to, "owner is not _to");
while(owner != _to) {
transfer(_to, _value);
}
return true;
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
_() {}
1
---------------------------------
609 function_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
610 function_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
611 function_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
612 function_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
613 function_call77.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint64 test1(uint256 amount){
uint256 v = U256SafeMul(a, a);
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint32 test3(uint256 a){
uint32 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
614 for2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
0
---------------------------------
615 for2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
0
---------------------------------
616 for2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
0
---------------------------------
617 for2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
0
---------------------------------
618 for2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
0
---------------------------------
619 loopfunction_call2.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
620 loopfunction_call2.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
621 loopfunction_call2.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
622 loopfunction_call2.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test1(e);
return res;
}
1
---------------------------------
623 loopwhile77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uin64 res) {
PrintStr("while", "while")
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
624 loopwhile77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uin64 res) {
PrintStr("while", "while")
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
625 loopwhile77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uin64 res) {
PrintStr("while", "while")
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
626 loopwhile77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uin64 res) {
PrintStr("while", "while")
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
1
---------------------------------
627 loopfallback11111.c
#include "vntlib.h"
KEY uint16 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
628 loopfallback11111.c
#include "vntlib.h"
KEY uint16 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
629 loopfallback11111.c
#include "vntlib.h"
KEY uint16 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
630 loopfallback11111.c
#include "vntlib.h"
KEY uint16 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
631 loopfallback11111.c
#include "vntlib.h"
KEY uint16 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
632 loopfallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
633 loopfallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
634 loopfallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
635 loopfallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
636 loopfallback333.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint256 $deposit(int32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
return account.value;
}
string perform() {
string UUID = "1234-5678-9101";
PrintStr("UUID", "UUID")
$deposit(UUID);
return UUID;
}
$_() {
string s = perform();
PrintStr("s",  s)
}
1
---------------------------------
637 loopfallback333.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint256 $deposit(int32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
return account.value;
}
string perform() {
string UUID = "1234-5678-9101";
PrintStr("UUID", "UUID")
$deposit(UUID);
return UUID;
}
$_() {
string s = perform();
PrintStr("s",  s)
}
1
---------------------------------
638 loopfallback333.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint256 $deposit(int32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
return account.value;
}
string perform() {
string UUID = "1234-5678-9101";
PrintStr("UUID", "UUID")
$deposit(UUID);
return UUID;
}
$_() {
string s = perform();
PrintStr("s",  s)
}
1
---------------------------------
639 loopwhile2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(uint128 x){
while (count <= 100)
PrintUint128T("count:", count);
count++;
return count
}
1
---------------------------------
640 loopwhile2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(uint128 x){
while (count <= 100)
PrintUint128T("count:", count);
count++;
return count
}
1
---------------------------------
641 loopwhile2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(uint128 x){
while (count <= 100)
PrintUint128T("count:", count);
count++;
return count
}
1
---------------------------------
642 fallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(){
uint256 amount = 100;
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
643 fallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(){
uint256 amount = 100;
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
644 fallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(){
uint256 amount = 100;
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
645 fallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(){
uint256 amount = 100;
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
646 loopfallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
647 loopfallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
648 loopfallback777.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
649 while55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
650 while55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
651 while55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
652 while55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
653 while55.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){}
UNMUTABLE
uint64 getFinalCount() {
uint64 x = 100;
uint64 res = U256SafeAdd(x, x);
count = test(res);
return count;
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
654 fallback111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("test()", "test()");
test(param, amount);
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount);
uint32 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
655 fallback111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("test()", "test()");
test(param, amount);
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount);
uint32 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
656 fallback111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("test()", "test()");
test(param, amount);
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount);
uint32 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
657 fallback111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("test()", "test()");
test(param, amount);
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount);
uint32 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
658 fallback111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("test()", "test()");
test(param, amount);
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount);
uint32 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
659 while44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 1000;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
660 while44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 1000;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
661 while44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 1000;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
662 while44444.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While4(){
}
MUTABLE
uint16 test1(uint16 res) {
while(count < res) {
count += 2;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 1000;
uint16 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
0
---------------------------------
663 function_call66.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _owner) {
owner = GetSender();
balances.key = _owner;
if (owner != _to) {
transfer(_to, _value);
}
return balances.value;
}
0
---------------------------------
664 function_call66.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _owner) {
owner = GetSender();
balances.key = _owner;
if (owner != _to) {
transfer(_to, _value);
}
return balances.value;
}
0
---------------------------------
665 function_call66.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
uint256 balanceOf(address _owner) {
owner = GetSender();
balances.key = _owner;
if (owner != _to) {
transfer(_to, _value);
}
return balances.value;
}
0
---------------------------------
666 loopfor1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For1(){}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
667 loopfor1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For1(){}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
668 loopfor1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For1(){}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
669 loopfor1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For1(){}
MUTABLE
uint128 test1(){
PrintStr("uint128", "uint128")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
670 loopfunction_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
KEY string ss;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
ss = test2(a)
} else {
c = U256SafeAdd(a, a)
ss = test2(a)
}
printStr("ss value", ss)
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
MUTABLE
string test2(uint256 a){
if (a > 100) {
return "get double"
} else {
GetFreeChips()
return "get multiple"
}
}
1
---------------------------------
671 loopfunction_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
KEY string ss;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
ss = test2(a)
} else {
c = U256SafeAdd(a, a)
ss = test2(a)
}
printStr("ss value", ss)
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
MUTABLE
string test2(uint256 a){
if (a > 100) {
return "get double"
} else {
GetFreeChips()
return "get multiple"
}
}
1
---------------------------------
672 loopfunction_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
KEY string ss;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
ss = test2(a)
} else {
c = U256SafeAdd(a, a)
ss = test2(a)
}
printStr("ss value", ss)
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
MUTABLE
string test2(uint256 a){
if (a > 100) {
return "get double"
} else {
GetFreeChips()
return "get multiple"
}
}
1
---------------------------------
673 loopfunction_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
KEY string ss;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
ss = test2(a)
} else {
c = U256SafeAdd(a, a)
ss = test2(a)
}
printStr("ss value", ss)
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
MUTABLE
string test2(uint256 a){
if (a > 100) {
return "get double"
} else {
GetFreeChips()
return "get multiple"
}
}
1
---------------------------------
674 function_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
675 function_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
676 function_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
677 function_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
678 function_call5555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint128T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
679 loopfor22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
uint64 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
1
---------------------------------
680 loopfor22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
uint64 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
1
---------------------------------
681 loopfor22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
uint64 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
1
---------------------------------
682 fallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint64 test2(uint8 amount){
PrintStr("Fallback", "Fallback")
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
683 fallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint64 test2(uint8 amount){
PrintStr("Fallback", "Fallback")
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
684 fallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint64 test2(uint8 amount){
PrintStr("Fallback", "Fallback")
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
685 fallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint64 test2(uint8 amount){
PrintStr("Fallback", "Fallback")
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
686 fallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint64 test2(uint8 amount){
PrintStr("Fallback", "Fallback")
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
687 function_call666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint64 balanceOf(address _owner) {
balances.key = _owner;
PrintInt64T("value", balances.value);
return balances.value;
}
0
---------------------------------
688 function_call666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint64 balanceOf(address _owner) {
balances.key = _owner;
PrintInt64T("value", balances.value);
return balances.value;
}
0
---------------------------------
689 function_call666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint64 balanceOf(address _owner) {
balances.key = _owner;
PrintInt64T("value", balances.value);
return balances.value;
}
0
---------------------------------
690 loopfallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(uint32 amount){
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
uint256 res = test1(s);
PrintUint256T("res", res)
}
1
---------------------------------
691 loopfallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(uint32 amount){
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
uint256 res = test1(s);
PrintUint256T("res", res)
}
1
---------------------------------
692 loopfallback222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint256 test1(uint32 amount){
uint256 res = U256SafeAdd(amount, amount);
return res;
}
_(){
uint256 res = test1(s);
PrintUint256T("res", res)
}
1
---------------------------------
693 loopfallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
694 loopfallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
695 loopfallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
696 loopfallback7777.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback7 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
697 for44.c
#include "vntlib.h"
KEY uint64 count;
KEY uint256 max = 65535;
constructor For4(){}
MUTABLE
uint64 test1() {
uint32 res = test2();
while(res != 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
_() {
test1();
}
0
---------------------------------
698 for44.c
#include "vntlib.h"
KEY uint64 count;
KEY uint256 max = 65535;
constructor For4(){}
MUTABLE
uint64 test1() {
uint32 res = test2();
while(res != 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
_() {
test1();
}
0
---------------------------------
699 for44.c
#include "vntlib.h"
KEY uint64 count;
KEY uint256 max = 65535;
constructor For4(){}
MUTABLE
uint64 test1() {
uint32 res = test2();
while(res != 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
_() {
test1();
}
0
---------------------------------
700 for44.c
#include "vntlib.h"
KEY uint64 count;
KEY uint256 max = 65535;
constructor For4(){}
MUTABLE
uint64 test1() {
uint32 res = test2();
while(res != 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
_() {
test1();
}
0
---------------------------------
701 for44.c
#include "vntlib.h"
KEY uint64 count;
KEY uint256 max = 65535;
constructor For4(){}
MUTABLE
uint64 test1() {
uint32 res = test2();
while(res != 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
_() {
test1();
}
0
---------------------------------
702 loopfor111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("uint256", "uint256")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
703 loopfor111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("uint256", "uint256")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
704 loopfor111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){}
MUTABLE
uint256 test1(){
PrintStr("uint256", "uint256")
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
705 loopfunction_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
1
---------------------------------
706 loopfunction_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
1
---------------------------------
707 loopfunction_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
1
---------------------------------
708 loopwhile111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("test()", "test()")
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
709 loopwhile111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("test()", "test()")
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
710 loopwhile111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("test()", "test()")
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
711 loopwhile111.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){}
MUTABLE
uint256 test(uint256 x){
PrintStr("test()", "test()")
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
712 loopwhile444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
713 loopwhile444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
714 loopwhile444.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){
}
MUTABLE
uint256 test1(uint256 res) {
PrintStr("test1()", "test1()")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test1(res);
}
1
---------------------------------
715 for55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
716 for55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
717 for55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
718 for55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
719 for55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (k = -1; k == 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
0
---------------------------------
720 loopfor44444.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For4(){
}
MUTABLE
uint16 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint16T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
721 loopfor44444.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For4(){
}
MUTABLE
uint16 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint16T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
722 loopfor44444.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For4(){
}
MUTABLE
uint16 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint16T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
723 loopfor44444.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For4(){
}
MUTABLE
uint16 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint16T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
724 loopfallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1() {}
CALL uint16 test(CallParams params, uint8 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test2(uint256 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
uint64 test1(uint256 amount){
PrintStr("fallback", "fallback")
uint256 res = test(param, amount)
return res;
}
_(){
test2(count);
}
1
---------------------------------
725 loopfallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1() {}
CALL uint16 test(CallParams params, uint8 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test2(uint256 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
uint64 test1(uint256 amount){
PrintStr("fallback", "fallback")
uint256 res = test(param, amount)
return res;
}
_(){
test2(count);
}
1
---------------------------------
726 loopfallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1() {}
CALL uint16 test(CallParams params, uint8 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test2(uint256 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
uint64 test1(uint256 amount){
PrintStr("fallback", "fallback")
uint256 res = test(param, amount)
return res;
}
_(){
test2(count);
}
1
---------------------------------
727 loopfallback11.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1() {}
CALL uint16 test(CallParams params, uint8 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint64 test2(uint256 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
uint64 test1(uint256 amount){
PrintStr("fallback", "fallback")
uint256 res = test(param, amount)
return res;
}
_(){
test2(count);
}
1
---------------------------------
728 loopfallback22.c
#include "vntlib.h"
KEY string s = "Fallback recurrent";
constructor Fallback2(){}
MUTABLE
uint64 test1(uint32 amount){
PrintStr("Fallback", "Fallback")
uint64 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
729 loopfallback22.c
#include "vntlib.h"
KEY string s = "Fallback recurrent";
constructor Fallback2(){}
MUTABLE
uint64 test1(uint32 amount){
PrintStr("Fallback", "Fallback")
uint64 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
730 loopfallback22.c
#include "vntlib.h"
KEY string s = "Fallback recurrent";
constructor Fallback2(){}
MUTABLE
uint64 test1(uint32 amount){
PrintStr("Fallback", "Fallback")
uint64 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
731 loopfallback22.c
#include "vntlib.h"
KEY string s = "Fallback recurrent";
constructor Fallback2(){}
MUTABLE
uint64 test1(uint32 amount){
PrintStr("Fallback", "Fallback")
uint64 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
732 loopfallback22.c
#include "vntlib.h"
KEY string s = "Fallback recurrent";
constructor Fallback2(){}
MUTABLE
uint64 test1(uint32 amount){
PrintStr("Fallback", "Fallback")
uint64 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
733 fallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
734 fallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
735 fallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
736 fallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
737 fallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint64 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
PrintStr("getRes", "getRes");
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint64 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
738 function_call1111.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function1(){}
MUTABLE
uint128 test1(uint256 amount){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
739 function_call1111.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function1(){}
MUTABLE
uint128 test1(uint256 amount){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
740 function_call1111.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function1(){}
MUTABLE
uint128 test1(uint256 amount){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
741 fallback66.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test2();
PrintUint256T("uint256", res);
}
0
---------------------------------
742 fallback66.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test2();
PrintUint256T("uint256", res);
}
0
---------------------------------
743 fallback66.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test2();
PrintUint256T("uint256", res);
}
0
---------------------------------
744 fallback66.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
uint256 test(){
Require(accounts.value.balance > 0, "balance > 0");
uint32 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test2();
PrintUint256T("uint256", res);
}
0
---------------------------------
745 for333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
746 for333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
747 for333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
748 for333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
PrintStr("This is a example", "This is a example");
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
749 loopwhile777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint256 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count;
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
750 loopwhile777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint256 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count;
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
751 loopwhile777.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint256 test1(uint256 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count;
}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
752 while7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
753 while7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
754 while7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
755 while7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
756 while7.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While7(){
}
MUTABLE
uint32 test1(uint256 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
757 loopfallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint64 res = test2();
PrintUint64T("res", res);
}
1
---------------------------------
758 loopfallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint64 res = test2();
PrintUint64T("res", res);
}
1
---------------------------------
759 loopfallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint64 res = test2();
PrintUint64T("res", res);
}
1
---------------------------------
760 loopfallback666.c
#include "vntlib.h"
KEY uint64 amount = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint64 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint64 res = U256SafeAdd(balance, amount);
return res;
}
uint64 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint64 res = test2();
PrintUint64T("res", res);
}
1
---------------------------------
761 loopfallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint128 amount){
address from = GetSender();
uint128 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
762 loopfallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint128 amount){
address from = GetSender();
uint128 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
763 loopfallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint128 amount){
address from = GetSender();
uint128 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
764 loopfallback8888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint128 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint128 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint128 amount){
address from = GetSender();
uint128 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
765 loopfor66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
766 loopfor66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
767 loopfor66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
768 loopfor66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
769 fallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(){
uint16 amount = 100;
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
770 fallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(){
uint16 amount = 100;
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
771 fallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(){
uint16 amount = 100;
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
772 fallback22222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint16 test1(){
uint16 amount = 100;
uint16 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
773 loopwhile6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
774 loopwhile6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
775 loopwhile6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
776 loopwhile6.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
MUTABLE
uint32 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
777 fallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
778 fallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
779 fallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
780 fallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
781 loopfunction_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
782 loopfunction_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
783 loopfunction_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
784 while5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
785 while5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
786 while5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
787 while5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
788 while5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
789 while5.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While5(){
}
MUTABLE
uint32 test1(uint256 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
790 for66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
791 for66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
792 for66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
793 for66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
794 for66666.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For6(){
}
MUTABLE
uint16 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
795 loopwhile_loop.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While_loop(){}
MUTABLE
uint256 test(uint256 x){
uint256 a = x;
while(a > 0) {
if (a == 100) {
return x;
}
if (a == 1) {
break;
}
a -= 1;
}
return a;
}
1
---------------------------------
796 loopwhile_loop.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While_loop(){}
MUTABLE
uint256 test(uint256 x){
uint256 a = x;
while(a > 0) {
if (a == 100) {
return x;
}
if (a == 1) {
break;
}
a -= 1;
}
return a;
}
1
---------------------------------
797 loopwhile_loop.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While_loop(){}
MUTABLE
uint256 test(uint256 x){
uint256 a = x;
while(a > 0) {
if (a == 100) {
return x;
}
if (a == 1) {
break;
}
a -= 1;
}
return a;
}
1
---------------------------------
798 loopfor222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint256 test1(){
uint256 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint256 GetCount() {
PrintStr("test1()", "test1()")
return test1();
}
1
---------------------------------
799 loopfor222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint256 test1(){
uint256 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint256 GetCount() {
PrintStr("test1()", "test1()")
return test1();
}
1
---------------------------------
800 loopfor222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint256 test1(){
uint256 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint256 GetCount() {
PrintStr("test1()", "test1()")
return test1();
}
1
---------------------------------
801 loopwhile22.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While2(){}
MUTABLE
uint64 test1(uint256 x){
PrintStr("while", "while")
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
802 loopwhile22.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While2(){}
MUTABLE
uint64 test1(uint256 x){
PrintStr("while", "while")
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
803 loopwhile22.c
#include "vntlib.h"
KEY uint64 count = 0;
constructor While2(){}
MUTABLE
uint64 test1(uint256 x){
PrintStr("while", "while")
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count
}
1
---------------------------------
804 fallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
805 fallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
806 fallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
if (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
0
---------------------------------
807 loopfor2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
uint32 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
1
---------------------------------
808 loopfor2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
uint32 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
1
---------------------------------
809 loopfor2.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){
}
MUTABLE
uint32 test1(){
uint32 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint32 GetCount() {
return test1();
}
1
---------------------------------
810 loopfunction_call9.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
811 loopfunction_call9.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
812 loopfunction_call9.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
813 loopwhile55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
814 loopwhile55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
815 loopwhile55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
816 loopwhile55555.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While5(){
}
MUTABLE
uint16 test1(uint16 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
817 loopfallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
test1();
}
1
---------------------------------
818 loopfallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
test1();
}
1
---------------------------------
819 loopfallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
test1();
}
1
---------------------------------
820 function_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint128 a){
PrintStr("v = a", "v = a");
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
821 function_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint128 a){
PrintStr("v = a", "v = a");
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
822 function_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint128 a){
PrintStr("v = a", "v = a");
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
823 fallback4.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
824 fallback4.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
825 fallback4.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
826 fallback4.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
827 fallback4.c
#include "vntlib.h"
KEY uint256 count = 0
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
828 loopfor333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
829 loopfor333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
830 loopfor333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
831 loopfor333.c
#include "vntlib.h"
KEY uint256 count;
constructor For3(){
}
MUTABLE
uint256 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint256T("count:", count);
}
return count;
}
1
---------------------------------
832 for22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
0
---------------------------------
833 for22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
0
---------------------------------
834 for22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
0
---------------------------------
835 for22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
0
---------------------------------
836 for22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
0
---------------------------------
837 for22.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For2(){}
MUTABLE
uint64 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint64 GetCount() {
PrintStr("uint256:", "count < 1000");
return test1();
}
0
---------------------------------
838 loopfallback444.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
1
---------------------------------
839 loopfallback444.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
1
---------------------------------
840 loopfallback444.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
1
---------------------------------
841 loopfallback444.c
#include "vntlib.h"
KEY uint256 count = 1000
constructor Fallback4() {}
MUTABLE
uint256 test1(uint256 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint256 res = test1(count);
PrintUint256T("res", res);
}
1
---------------------------------
842 loopfor88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
843 loopfor88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
844 loopfor88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
845 loopfor88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j > 50; j++) {
if (j > 100) {
count = j;
PrintUint256T("remark", j)
}
}
}
return count;
}
1
---------------------------------
846 while77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While7(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
847 while77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While7(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
848 while77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While7(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
849 while77.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint64 count);
constructor While7(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
return test(res);
}
MUTABLE
uint64 test(uint64 res) {
PrintStr("while", "while")
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
0
---------------------------------
850 fallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
851 fallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
852 fallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
853 fallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
854 fallback8.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
855 loopfor33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint16T("count:", count);
}
return count;
}
1
---------------------------------
856 loopfor33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint16T("count:", count);
}
return count;
}
1
---------------------------------
857 loopfor33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint16T("count:", count);
}
return count;
}
1
---------------------------------
858 loopfor33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i--) {
count++;
PrintUint16T("count:", count);
}
return count;
}
1
---------------------------------
859 loopfor44.c
#include "vntlib.h"
KEY uint64 count = 1;
constructor For4(){}
MUTABLE
uint32 test1() {
uint32 res = test2();
while(res > 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
_() {
test1();
}
1
---------------------------------
860 loopfor44.c
#include "vntlib.h"
KEY uint64 count = 1;
constructor For4(){}
MUTABLE
uint32 test1() {
uint32 res = test2();
while(res > 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
_() {
test1();
}
1
---------------------------------
861 loopfor44.c
#include "vntlib.h"
KEY uint64 count = 1;
constructor For4(){}
MUTABLE
uint32 test1() {
uint32 res = test2();
while(res > 0) {
res--;
count += res;
}
return count;
}
MUTABLE
uint64 test2() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
_() {
test1();
}
1
---------------------------------
862 loopwhile222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint256 test(uint256 x){
PrintStr("while()", "while()");
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count;
}
1
---------------------------------
863 loopwhile222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint256 test(uint256 x){
PrintStr("while()", "while()");
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count;
}
1
---------------------------------
864 loopwhile222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint256 test(uint256 x){
PrintStr("while()", "while()");
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count;
}
1
---------------------------------
865 loopwhile222.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While2(){
}
MUTABLE
uint256 test(uint256 x){
PrintStr("while()", "while()");
while (count <= 100)
PrintUint256T("count:", count);
count++;
return count;
}
1
---------------------------------
866 loopfunction_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint256 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
867 loopfunction_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint256 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
868 loopfunction_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint256 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
869 loopfunction_call8888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint128 test1(uint256 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 i = 0;
uint128 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
870 fallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
871 fallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
872 fallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
873 fallback7.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
test1();
}
0
---------------------------------
874 loopwhile66.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint64 test1(uint32 a, uint32 b) {
PrintStr('while', "while")
while (b < a) {
count++;
a += b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
875 loopwhile66.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint64 test1(uint32 a, uint32 b) {
PrintStr('while', "while")
while (b < a) {
count++;
a += b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
876 loopwhile66.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint64 test1(uint32 a, uint32 b) {
PrintStr('while', "while")
while (b < a) {
count++;
a += b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
877 loopfunction_call99999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
878 loopfunction_call99999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
879 loopfunction_call99999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
880 loopfunction_call99999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
}
1
---------------------------------
881 fallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
PrintStr("For and Fallback", "For and Fallback")
for(uint32 i = 0; i < amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
882 fallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
PrintStr("For and Fallback", "For and Fallback")
for(uint32 i = 0; i < amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
883 fallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
PrintStr("For and Fallback", "For and Fallback")
for(uint32 i = 0; i < amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
884 fallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 amount){
PrintStr("For and Fallback", "For and Fallback")
for(uint32 i = 0; i < amount; i++) {
count += i;
}
}
_(){
test1(count);
}
0
---------------------------------
885 fallback11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Fallback1(){}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint16 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
886 fallback11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Fallback1(){}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint16 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
887 fallback11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Fallback1(){}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint16 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
888 fallback11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Fallback1(){}
CALL uint16 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(uint16 amount){
test(param, amount)
return amount;
}
MUTABLE
uint16 test2(uint8 amount){
test1(amount)
uint16 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
889 function_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
890 function_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
891 function_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
892 function_call4.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
893 loopwhile33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
894 loopwhile33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
895 loopwhile33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
896 loopwhile33333.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint16 test1(string s){
isDone = Equal(s, ss);
uint16 res = test2(isDone)
return res;
}
MUTABLE
uint16 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
897 loopfallback3333.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint128 $deposit(int128 id) {
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
return account.value;
}
string perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
return UUID;
}
$_() {
string s = perform();
PrintStr("s",  s)
}
1
---------------------------------
898 loopfallback3333.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint128 $deposit(int128 id) {
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
return account.value;
}
string perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
return UUID;
}
$_() {
string s = perform();
PrintStr("s",  s)
}
1
---------------------------------
899 loopfallback3333.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint128 $deposit(int128 id) {
uint128 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
return account.value;
}
string perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
return UUID;
}
$_() {
string s = perform();
PrintStr("s",  s)
}
1
---------------------------------
900 function_call66666.c
#include "vntlib.h"
KEY mapping (address, uint16) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint16 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint16 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint16 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
901 function_call66666.c
#include "vntlib.h"
KEY mapping (address, uint16) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint16 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint16 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint16 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
902 function_call66666.c
#include "vntlib.h"
KEY mapping (address, uint16) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint16 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint16 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint16 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
903 function_call66666.c
#include "vntlib.h"
KEY mapping (address, uint16) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint16 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint16 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint16 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint16 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
904 while2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
905 while2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
906 while2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
907 while2222.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While2(){
}
MUTABLE
uint128 test1(){
while (count <= 100) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
908 loopfallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint128 res = test2();
PrintUint128T("res", res);
}
1
---------------------------------
909 loopfallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint128 res = test2();
PrintUint128T("res", res);
}
1
---------------------------------
910 loopfallback6666.c
#include "vntlib.h"
KEY uint128 amount = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint128 getRes(address addr, uint128 amount) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
uint128 res = U256SafeAdd(balance, amount);
return res;
}
uint128 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint64 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
uint128 res = test2();
PrintUint128T("res", res);
}
1
---------------------------------
911 loopfunction_call99.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
uint64 aa = test3(a, i);
return aa;
}
MUTABLE
uint64 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
uint32 ai = test1();
return ai;
}
1
---------------------------------
912 loopfunction_call99.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
uint64 aa = test3(a, i);
return aa;
}
MUTABLE
uint64 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
uint32 ai = test1();
return ai;
}
1
---------------------------------
913 loopfunction_call99.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
uint64 aa = test3(a, i);
return aa;
}
MUTABLE
uint64 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
uint32 ai = test1();
return ai;
}
1
---------------------------------
914 loopfunction_call99.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
uint64 aa = test3(a, i);
return aa;
}
MUTABLE
uint64 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
uint32 ai = test1();
return ai;
}
1
---------------------------------
915 function_call2222.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function2(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
916 function_call2222.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function2(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
917 function_call2222.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function2(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
918 function_call2222.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function2(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
919 function_call2222.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function2(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
920 function_call2222.c
#include "vntlib.h"
KEY uint128 count = 10;
constructor Function2(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
921 loopfallback44444.c
#include "vntlib.h"
KEY uint16 count = 1000
constructor Fallback4() {}
MUTABLE
uint16 test1(uint16 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
1
---------------------------------
922 loopfallback44444.c
#include "vntlib.h"
KEY uint16 count = 1000
constructor Fallback4() {}
MUTABLE
uint16 test1(uint16 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
1
---------------------------------
923 loopfallback44444.c
#include "vntlib.h"
KEY uint16 count = 1000
constructor Fallback4() {}
MUTABLE
uint16 test1(uint16 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
1
---------------------------------
924 loopfallback44444.c
#include "vntlib.h"
KEY uint16 count = 1000
constructor Fallback4() {}
MUTABLE
uint16 test1(uint16 amount){
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count;
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
1
---------------------------------
925 loopfunction_call1.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint64 test1(uint64 amount){
uint64 v = amount;
uint64 c = test2(amount, v);
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
926 loopfunction_call1.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint64 test1(uint64 amount){
uint64 v = amount;
uint64 c = test2(amount, v);
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
927 loopfunction_call1.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint64 test1(uint64 amount){
uint64 v = amount;
uint64 c = test2(amount, v);
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = test1(a);
return res;
}
$_() {}
1
---------------------------------
928 for1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){
}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
929 for1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){
}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
930 for1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){
}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
931 for1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For1(){
}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
932 for666.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){}
MUTABLE
uint256 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
933 for666.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){}
MUTABLE
uint256 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
934 for666.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){}
MUTABLE
uint256 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
935 for666.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For6(){}
MUTABLE
uint256 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
936 function_call333.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
_() {}
0
---------------------------------
937 function_call333.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
_() {}
0
---------------------------------
938 function_call333.c
#include "vntlib.h"
KEY uint256 v;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
_() {}
0
---------------------------------
939 function_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i--;
}
return i;
}
0
---------------------------------
940 function_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i--;
}
return i;
}
0
---------------------------------
941 function_call555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint32 test1(){
uint32 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
i--;
}
return i;
}
0
---------------------------------
942 while7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint128 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
943 while7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint128 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
944 while7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint128 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
945 while7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint128 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
946 while7777.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While7(){
}
MUTABLE
uint128 test1(uint128 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
947 loopwhile1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){}
MUTABLE
uint128 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
948 loopwhile1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){}
MUTABLE
uint128 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
949 loopwhile1111.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor While1(){}
MUTABLE
uint128 test1(uint256 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
950 for6.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
951 for6.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
952 for6.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
953 for6.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint32 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
954 loopfunction_call33333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = amount;
uint16 c = test1(v)
return c;
}
1
---------------------------------
955 loopfunction_call33333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = amount;
uint16 c = test1(v)
return c;
}
1
---------------------------------
956 loopfunction_call33333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = amount;
uint16 c = test1(v)
return c;
}
1
---------------------------------
957 loopfunction_call33333.c
#include "vntlib.h"
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = amount;
uint16 c = test1(v)
return c;
}
1
---------------------------------
958 loopwhile88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
959 loopwhile88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
960 loopwhile88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
961 loopwhile88.c
#include "vntlib.h"
typedef struct voter
{
uint64 weight;
bool voted;
uint64 vote;
address delegate;
} Voter;
KEY Voter sender;
typedef struct proposal
{
string name;
uint64 voteCount;
} Proposal;
KEY address chairperson;
KEY mapping(address, Voter) voters;
KEY array(Proposal) proposals;
void delegate(address to) {
sender = GetSender();
while(voters[to].delegate){
to = GetSender();
}
sender.value.voted = true;
sender.value.delegate = to;
delegate_ = voters[to];
if(delegate_.value.voted){
proposals[delegate_.value.vote].value.voteCount += sender.value.weight;
}else{
delegate_.value.weight += sender.value.weight;
}
}
1
---------------------------------
962 loopfor11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){}
MUTABLE
uint64 test(){
PrintUint256T("get amount:", count);
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
963 loopfor11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){}
MUTABLE
uint64 test(){
PrintUint256T("get amount:", count);
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
964 loopfor11.c
#include "vntlib.h"
KEY uint64 count;
constructor For1(){}
MUTABLE
uint64 test(){
PrintUint256T("get amount:", count);
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
965 loopwhile66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
966 loopwhile66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
967 loopwhile66666.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While6(){
}
MUTABLE
uint16 test1(uint32 a, uint32 b) {
while (b < a) {
count++;
a += b;
}
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
uint16 result = test1(res * random(), res);
return result;
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
1
---------------------------------
968 loopfunction_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
969 loopfunction_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
970 loopfunction_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
971 loopfunction_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
972 for1111.c
#include "vntlib.h"
KEY uint128 count;
constructor For1(){
}
MUTABLE
uint128 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
973 for1111.c
#include "vntlib.h"
KEY uint128 count;
constructor For1(){
}
MUTABLE
uint128 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
974 for1111.c
#include "vntlib.h"
KEY uint128 count;
constructor For1(){
}
MUTABLE
uint128 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
975 for1111.c
#include "vntlib.h"
KEY uint128 count;
constructor For1(){
}
MUTABLE
uint128 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
976 for1111.c
#include "vntlib.h"
KEY uint128 count;
constructor For1(){
}
MUTABLE
uint128 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
977 loopfor11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
978 loopfor11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
979 loopfor11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
980 loopfunction_call111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test2(amount, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res1 = test1(a);
uint256 res2 = test2(a, res1)
return res2;
}
1
---------------------------------
981 loopfunction_call111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test2(amount, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res1 = test1(a);
uint256 res2 = test2(a, res1)
return res2;
}
1
---------------------------------
982 loopfunction_call111.c
#include "vntlib.h"
constructor Function1(){}
MUTABLE
uint256 test1(uint256 amount){
uint256 v = amount;
PrintStr("v = amount", "v = amount")
uint256 c = test2(amount, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res1 = test1(a);
uint256 res2 = test2(a, res1)
return res2;
}
1
---------------------------------
983 function_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
984 function_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
985 function_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
986 function_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
987 function_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
988 fallback44444.c
#include "vntlib.h"
KEY uint16 count = 0
constructor Fallback4() {}
MUTABLE
uint16 test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
0
---------------------------------
989 fallback44444.c
#include "vntlib.h"
KEY uint16 count = 0
constructor Fallback4() {}
MUTABLE
uint16 test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
0
---------------------------------
990 fallback44444.c
#include "vntlib.h"
KEY uint16 count = 0
constructor Fallback4() {}
MUTABLE
uint16 test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
0
---------------------------------
991 fallback44444.c
#include "vntlib.h"
KEY uint16 count = 0
constructor Fallback4() {}
MUTABLE
uint16 test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
0
---------------------------------
992 fallback44444.c
#include "vntlib.h"
KEY uint16 count = 0
constructor Fallback4() {}
MUTABLE
uint16 test1(uint256 amount){
for(uint32 i = 0; i< amount; i++) {
count += i;
}
}
_(){
uint16 res = test1(count);
PrintInt16T("res", res);
}
0
---------------------------------
993 function_call2.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
994 function_call2.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
995 function_call2.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
996 function_call2.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
997 function_call2.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint32 test1(uint256 a){
uint32 v = a;
uint32 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
998 loopfallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
999 loopfallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
1000 loopfallback88888.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint16 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint16 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
Withdraw(params1, 10);
}
1
---------------------------------
1001 loopfor1.c
#include "vntlib.h"
KEY uint32 count = 0;
constructor For1(){}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
1002 loopfor1.c
#include "vntlib.h"
KEY uint32 count = 0;
constructor For1(){}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
1003 loopfor1.c
#include "vntlib.h"
KEY uint32 count = 0;
constructor For1(){}
MUTABLE
uint32 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
1
---------------------------------
1004 loopfunction_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1005 loopfunction_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1006 loopfunction_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1007 loopfunction_call88.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = U256SafeMul(a, a);
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint32 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1008 loopfunction_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
PrintStr("v = a", "v = a")
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1009 loopfunction_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
PrintStr("v = a", "v = a")
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1010 loopfunction_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
PrintStr("v = a", "v = a")
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1011 loopfunction_call888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint256 test1(uint256 a){
v = a;
PrintStr("v = a", "v = a")
c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint32 i = 0;
uint256 e = U256SafeAdd(b, c);
do {
i++;
e += i;
} while(e > 0);
return i;
}
1
---------------------------------
1012 function_call11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function1(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1013 function_call11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function1(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1014 function_call11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function1(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1015 function_call11111.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function1(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1016 function_call1.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1017 function_call1.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1018 function_call1.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1019 function_call1.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function1(){}
MUTABLE
uint256 test1(uint256 a){
uint256 v = a;
uint256 c = test2(a, v)
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint32 res = test3(e);
return res;
}
MUTABLE
uint256 test3(uint256 a){
uint256 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1020 function_call33333.c
#include "vntlib.h"
KEY uint16 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
1021 function_call33333.c
#include "vntlib.h"
KEY uint16 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
1022 function_call33333.c
#include "vntlib.h"
KEY uint16 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
1023 function_call33333.c
#include "vntlib.h"
KEY uint16 v = 0;
KEY mapping(address, uint) account;
constructor Test1(){}
MUTABLE
uint16 test1(uint16 amount){
v = amount;
address to = GetSender();
account.key = to;
account.value = U256SafeAdd(account.value, amount);
return account.value;
}
0
---------------------------------
1024 function_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint16 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
1025 function_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint16 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
1026 function_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint16 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
1027 function_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint16 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
1028 function_call88888.c
#include "vntlib.h"
constructor Function8(){}
MUTABLE
uint16 test1(uint16 amount){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint32 i = 0;
uint16 e = U256SafeAdd(b, c);
do {
i++;
e -= i;
} while(e > 0);
return i;
}
0
---------------------------------
1029 for6666.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
1030 for6666.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
1031 for6666.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
1032 for6666.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For6(){
}
MUTABLE
uint128 test1(){
for (uint8 i =0; i < 254; i++) {
count++;
}
return count;
}
0
---------------------------------
1033 loopfunction_call9999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
bool test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return true;
}
1
---------------------------------
1034 loopfunction_call9999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
bool test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return true;
}
1
---------------------------------
1035 loopfunction_call9999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
bool test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return true;
}
1
---------------------------------
1036 loopfunction_call9999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint128 res = test2();
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint128 test2() {
uint128 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
bool test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return true;
}
1
---------------------------------
1037 loopfallback1.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1038 loopfallback1.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1039 loopfallback1.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1040 loopfallback1.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1041 loopfallback1.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1042 loopfor55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
1043 loopfor55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
1044 loopfor55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
1045 loopfor55555.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For5(){
}
MUTABLE
uint16 test1(){
for (int32 k = -1; k = 1; k++) {
count++;
}
return count;
}
void test2() {
test1();
}
1
---------------------------------
1046 function_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
bool test2() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return true;
}
0
---------------------------------
1047 function_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
bool test2() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return true;
}
0
---------------------------------
1048 function_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
bool test2() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return true;
}
0
---------------------------------
1049 function_call4444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint128 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(){
uint128 res = test2(params);
PrintUint128T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
bool test2() {
uint128 a = 20;
uint128 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return true;
}
0
---------------------------------
1050 loopfallback111.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("fallback", "fallback")
test(param, amount)
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount)
uint256 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1051 loopfallback111.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("fallback", "fallback")
test(param, amount)
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount)
uint256 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1052 loopfallback111.c
#include "vntlib.h"
KEY uint256 count = U256(1000000000);
constructor Fallback1() {
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint256 test1(uint8 amount){
PrintStr("fallback", "fallback")
test(param, amount)
return amount;
}
MUTABLE
uint256 test2(uint8 amount){
test1(amount)
uint256 res = amount + 1;
return res;
}
_(){
test2(count);
}
1
---------------------------------
1053 while5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
1054 while5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
1055 while5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
1056 while5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
while(count < res) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
0
---------------------------------
1057 function_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
} else {
c = U256SafeAdd(a, a)
}
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
0
---------------------------------
1058 function_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
} else {
c = U256SafeAdd(a, a)
}
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
0
---------------------------------
1059 function_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
} else {
c = U256SafeAdd(a, a)
}
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
0
---------------------------------
1060 function_call11.c
#include "vntlib.h"
typedef struct
{
uint256 balance;
string nickName;
bool freeAddress;
} Account;
KEY mapping(address, Account) accounts;
KEY uint256 c = 0;
constructor Function1(){}
MUTABLE
uint256 test1(){
uint256 a = U256(100);
if (a > 100) {
c = U256SafeMul(a, a)
} else {
c = U256SafeAdd(a, a)
}
return c;
}
MUTABLE
void GetFreeChips()
{
address from = GetSender();
accounts.key = from;
bool flag = accounts.value.freeAddress;
Require(flag == false, "you have got before");
uint256 freeAmount = test1()
accounts.value.balance = U256SafeAdd(accounts.value.balance, freeAmount);
deposit = U256SafeAdd(deposit, freeAmount);
accounts.value.freeAddress = true;
}
0
---------------------------------
1061 loopfor666.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint256 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
1062 loopfor666.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint256 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
1063 loopfor666.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint256 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
1064 loopfor666.c
#include "vntlib.h"
KEY uint256 count;
constructor For6(){
}
MUTABLE
uint256 test1(){
for (; ;) {
count++;
}
return count;
}
1
---------------------------------
1065 loopfunction_call77777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
1066 loopfunction_call77777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
1067 loopfunction_call77777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint16 test1(uint16 a){
uint16 v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = test3(e);
return res;
}
MUTABLE
uint16 test3(uint16 a){
uint16 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
} while (minutes < 1);
return minutes;
}
1
---------------------------------
1068 function_call222.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
uint256 v = a;
uint256 c = test2(a, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1069 function_call222.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
uint256 v = a;
uint256 c = test2(a, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1070 function_call222.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
uint256 v = a;
uint256 c = test2(a, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1071 function_call222.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
uint256 v = a;
uint256 c = test2(a, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1072 function_call222.c
#include "vntlib.h"
KEY uint256 count = 10;
constructor Function2(){}
MUTABLE
uint256 test1(uint256 a){
PrintStr("v = a", "v = a");
uint256 v = a;
uint256 c = test2(a, v);
return c;
}
MUTABLE
uint256 test2(uint256 b, uint256 c){
uint256 e = U256SafeAdd(b, c);
uint256 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1073 for11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){
}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
1074 for11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){
}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
1075 for11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){
}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
1076 for11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For1(){
}
MUTABLE
uint16 test1(){
for (uint8 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
0
---------------------------------
1077 loopfor22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
uint16 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
1
---------------------------------
1078 loopfor22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
uint16 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
1
---------------------------------
1079 loopfor22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
uint16 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
1
---------------------------------
1080 loopfor22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
uint16 x = 0;
for (uint32 i = 0; i < 2000; i++) {
for(uint8 j = 0; j < 1000; j++){
count += 2;
if(count > 50) {
x = count;
}
}
}
return x;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
1
---------------------------------
1081 for8.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint32 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1082 for8.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint32 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1083 for8.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For8(){
}
MUTABLE
uint32 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1084 loopwhile44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintStr("while", "while")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
1
---------------------------------
1085 loopwhile44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintStr("while", "while")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
1
---------------------------------
1086 loopwhile44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintStr("while", "while")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
1
---------------------------------
1087 loopwhile44.c
#include "vntlib.h"
KEY uint64 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While4(){}
UNMUTABLE
uint64 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
EVENT_GETFINALCOUNT(count);
return test(res);
}
MUTABLE
uint64 test(uint256 res) {
PrintStr("while", "while")
while(count < res) {
count++;
if(count > 100) {
count = 0;
}
}
return count
}
1
---------------------------------
1088 for22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
0
---------------------------------
1089 for22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
0
---------------------------------
1090 for22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
0
---------------------------------
1091 for22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For2(){
}
MUTABLE
uint16 test1(){
for (uint32 i = 0; i < 2000; i++) {
count++;
if(count >= 2100){
break;
}
}
return count;
}
UNMUTABLE
uint16 GetCount() {
return test1();
}
0
---------------------------------
1092 fallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1093 fallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1094 fallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1095 fallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1096 fallback5.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint256 res = getRes(GetSender());
PrintUint256T("uint256", res);
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1097 loopfunction_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
1098 loopfunction_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
1099 loopfunction_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
i++;
}
}
1
---------------------------------
1100 loopfallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
1101 loopfallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
1102 loopfallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
1103 loopfallback2222.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint128 test1(uint32 amount){
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
test1(s);
}
1
---------------------------------
1104 for33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1105 for33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1106 for33333.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For3(){
}
MUTABLE
uint16 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1107 for44444.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint16 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1108 for44444.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint16 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1109 for44444.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint16 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1110 for44444.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint16 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1111 for44444.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint16 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1112 for44444.c
#include "vntlib.h"
KEY uint16 count = 0;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint16 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint16 test3() {
uint16 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1113 loopfallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 count){
PrintStr("For and Fallback", "For and Fallback")
for(uint8 i = 0; i< count; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
1114 loopfallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 count){
PrintStr("For and Fallback", "For and Fallback")
for(uint8 i = 0; i< count; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
1115 loopfallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 count){
PrintStr("For and Fallback", "For and Fallback")
for(uint8 i = 0; i< count; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
1116 loopfallback44.c
#include "vntlib.h"
KEY uint256 count = 1000;
constructor Fallback4() {}
MUTABLE
void test1(uint256 count){
PrintStr("For and Fallback", "For and Fallback")
for(uint8 i = 0; i< count; i++) {
count += i;
}
}
_(){
test1(count);
}
1
---------------------------------
1117 fallback1111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint128 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint128 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
1118 fallback1111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint128 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint128 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
1119 fallback1111.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint128 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint128 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint128 test2(uint8 amount){
test1(amount)
uint128 res = amount + 1;
return res;
}
_(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
0
---------------------------------
1120 loopfor4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For4(){
}
MUTABLE
uint128 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint128 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint128 test3() {
uint128 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1121 loopfor4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For4(){
}
MUTABLE
uint128 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint128 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint128 test3() {
uint128 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1122 loopfor4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For4(){
}
MUTABLE
uint128 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint128 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint128 test3() {
uint128 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1123 loopfor4444.c
#include "vntlib.h"
KEY uint128 count = 0;
constructor For4(){
}
MUTABLE
uint128 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint128 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint128 test3() {
uint128 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1124 for444.c
#include "vntlib.h"
KEY uint256 count;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint256 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint256 test3() {
uint256 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1125 for444.c
#include "vntlib.h"
KEY uint256 count;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint256 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint256 test3() {
uint256 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1126 for444.c
#include "vntlib.h"
KEY uint256 count;
KEY uint256 max = 65535;
constructor For4(){
}
MUTABLE
uint256 test1() {
Require(max <= 65535, "max < 65535");
for(uint16 i = 0; i < max; i++) {
count++;
PrintStr("uint32:", "uint32 > 1000000000");
}
return count;
}
MUTABLE
void test2() {
PrintUint256T("count:", count);
test3();
}
MUTABLE
uint256 test3() {
uint256 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
0
---------------------------------
1127 while666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test()", "test()");
while (b < a) {
count++;
a -= b;
}
return count；
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1128 while666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test()", "test()");
while (b < a) {
count++;
a -= b;
}
return count；
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1129 while666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test()", "test()");
while (b < a) {
count++;
a -= b;
}
return count；
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1130 while666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test()", "test()");
while (b < a) {
count++;
a -= b;
}
return count；
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1131 while666.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){}
UNMUTABLE
uint256 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test1(res * random(), res);
return result;
}
MUTABLE
uint256 test1(uint32 a, uint32 b) {
PrintStr("test()", "test()");
while (b < a) {
count++;
a -= b;
}
return count；
}
uint64 random() {
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1132 fallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
1133 fallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
1134 fallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
1135 fallback88.c
#include "vntlib.h"
KEY mapping(address, uint) account;
constructor $Donate(){}
MUTABLE
void $donate(){
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(account.value, amount);
}
UNMUTABLE
uint256 GetAmountFromAddress(address addr)
{
account.key = addr;
return account.value;
}
UNMUTABLE
uint256 queryAmount(address to) {
return GetAmountFromAddress(to);
}
MUTABLE
void Withdraw(uint256 amount){
address from = GetSender();
uint256 balance = account.value;
Require(U256_Cmp(U256SafeSub(balance, amount), 0) != -1, "No enough money to withdraw");
if(balance >= amount) {
TransferFromContract(from, amount)
account.key = from;
account.value = U256SafeSub(account.value, amount);
}
}
#include "vntlib.h"
KEY address owner;
constructor Attack(){
owner = GetSender();
}
CALL void Withdraw(CallParams params, uint256 amount);
CallParams params1 = {Address("donate.c"), U256(10000), 1000};
CALL void $donate(CallParams params);
CallParams params2 = {Address("donate.c"), U256(10000), 1000};
MUTABLE
void attack() {
$donate(params2);
Withdraw(params1, 10);
}
$_() {
PrintStr("fallback", "withdraw vnt");
}
0
---------------------------------
1136 loopwhile11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){
}
MUTABLE
uint16 test1(uint16 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
1137 loopwhile11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){
}
MUTABLE
uint16 test1(uint16 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
1138 loopwhile11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){
}
MUTABLE
uint16 test1(uint16 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
1139 loopwhile11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){
}
MUTABLE
uint16 test1(uint16 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
1140 loopwhile11111.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While1(){
}
MUTABLE
uint16 test1(uint16 x){
while(1 == 1) {
count = x;
}
while(true) {
count = x;
}
return count;
}
1
---------------------------------
1141 loopfallback33.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT EVENT_Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint256 $deposit(uint32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
EVENT_Deposit(GetSender(), id, GetValue(), account.value);
return amount;
}
string perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
return UUID;
}
$_() {
perform();
}
1
---------------------------------
1142 loopfallback33.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT EVENT_Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint256 $deposit(uint32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
EVENT_Deposit(GetSender(), id, GetValue(), account.value);
return amount;
}
string perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
return UUID;
}
$_() {
perform();
}
1
---------------------------------
1143 loopfallback33.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT EVENT_Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
uint256 $deposit(uint32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
EVENT_Deposit(GetSender(), id, GetValue(), account.value);
return amount;
}
string perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
return UUID;
}
$_() {
perform();
}
1
---------------------------------
1144 function_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint32 test2() {
uint32 a = 20;
PrintUint256T("a:", a);
uint32 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
1145 function_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint32 test2() {
uint32 a = 20;
PrintUint256T("a:", a);
uint32 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
1146 function_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint32 test2() {
uint32 a = 20;
PrintUint256T("a:", a);
uint32 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
1147 function_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint32 test2() {
uint32 a = 20;
PrintUint256T("a:", a);
uint32 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
1148 function_call444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint32 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
void test1(){
uint32 res = test2(params);
PrintUint256T("res:", res);
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
uint32 test2() {
uint32 a = 20;
PrintUint256T("a:", a);
uint32 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
return i;
}
0
---------------------------------
1149 loopwhile77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
1150 loopwhile77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
1151 loopwhile77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res = 200) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
1
---------------------------------
1152 function_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
1153 function_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
1154 function_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
1155 function_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
1156 function_call7777.c
#include "vntlib.h"
constructor Function7(){}
MUTABLE
uint128 test1(uint128 a){
uint128 v = a;
uint128 c = test2(a, v)
return c;
}
MUTABLE
uint128 test2(uint256 b, uint256 c){
uint128 e = U256SafeAdd(b, c);
uint128 res = test3(e);
return res;
}
MUTABLE
uint128 test3(uint256 a){
uint128 minutes = 0;
do {
PrintStr("How long is your shower(in minutes)?:", "do...while");
minutes += 1;
} while (minutes < 1);
return minutes;
}
0
---------------------------------
1157 function_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
1158 function_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
1159 function_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
1160 function_call55555.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
void test1(){
uint16 res = test2();
PrintUint16T("recurrent times:", res);
}
MUTABLE
uint16 test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i--;
}
return i;
}
MUTABLE
void test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
}
0
---------------------------------
1161 for88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1162 for88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1163 for88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1164 for88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1165 for88888.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor For8(){
}
MUTABLE
uint16 test1(){
for (uint256 i = 100; i > 0; i--) {
for (uint256 j = i; j < 50; j++) {
if (j > 100) {
count = j
PrintUint256T("remark", j)
}
}
}
return count;
}
0
---------------------------------
1166 loopfunction_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i"
}
1
---------------------------------
1167 loopfunction_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i"
}
1
---------------------------------
1168 loopfunction_call55.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint64 test1(){
uint64 res = test2();
PrintUint256T("recurrent times:", res);
return res
}
MUTABLE
uint64 test2() {
uint256 a = 20;
PrintUint256T("a:", a);
uint64 i = U256SafeMul(a, a)
while(i > a) {
Require(i > a, "i > a");
test3(a, i);
i++;
}
return i;
}
MUTABLE
string test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
return "a < i"
}
1
---------------------------------
1169 fallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint16", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1170 fallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint16", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1171 fallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint16", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1172 fallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint16", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1173 fallback55555.c
#include "vntlib.h"
KEY uint16 res = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
MUTABLE
void test1(){
uint16 res = getRes(GetSender());
PrintUint16T("uint16", res);
}
uint16 getRes(address addr) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
_(){
test1();
}
0
---------------------------------
1174 loopfallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
1175 loopfallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
1176 loopfallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
1177 loopfallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
1178 loopfallback66666.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback4 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback6() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
uint16 test2(){
Require(accounts.value.balance > 0, "balance > 0");
uint16 res = accounts.value.balance;
while (res > 0) {
test1();
}
return res;
}
_(){
test2();
}
1
---------------------------------
1179 loopwhile5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
1180 loopwhile5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
1181 loopwhile5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
1182 loopwhile5555.c
#include "vntlib.h"
KEY uint128 count = 0;
EVENT EVENT_GETFINALCOUNT(uint128 count);
constructor While5(){
}
MUTABLE
uint128 test1(uint128 res) {
do {
count++;
} while(count != 0);
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint128 getFinalCount() {
uint128 x = 100;
uint128 res = U256SafeAdd(x, x);
count = test1(res);
return count;
}
1
---------------------------------
1183 loopfallback3.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
void $deposit(int32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
}
void perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
}
$_() {
perform();
}
1
---------------------------------
1184 loopfallback3.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
void $deposit(int32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
}
void perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
}
$_() {
perform();
}
1
---------------------------------
1185 loopfallback3.c
#include "vntlib.h"
KEY mapping(address, uint) account;
KEY address owner;
EVENT Deposit(address indexed from, int32 id, uint256 value, uint256 balance);
constructor Fallback3(){
owner = GetSender();
}
MUTABLE
void $deposit(int32 id) {
uint256 amount = GetValue();
address from = GetSender();
account.key = from;
account.value = U256SafeAdd(accounts.value, amount);
deposit = U256SafeAdd(deposit, amount);
Deposit(GetSender(), id, GetValue(), account.value);
}
void perform() {
string UUID = "1234-5678-9101";
$deposit(UUID);
}
$_() {
perform();
}
1
---------------------------------
1186 while66.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test(res * random(), res);
return result;
}
MUTABLE
uint64 test(uint32 a, uint32 b) {
PrintStr("while", "while")
while (b < a) {
count++;
a -= b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1187 while66.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test(res * random(), res);
return result;
}
MUTABLE
uint64 test(uint32 a, uint32 b) {
PrintStr("while", "while")
while (b < a) {
count++;
a -= b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1188 while66.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test(res * random(), res);
return result;
}
MUTABLE
uint64 test(uint32 a, uint32 b) {
PrintStr("while", "while")
while (b < a) {
count++;
a -= b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1189 while66.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test(res * random(), res);
return result;
}
MUTABLE
uint64 test(uint32 a, uint32 b) {
PrintStr("while", "while")
while (b < a) {
count++;
a -= b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1190 while66.c
#include "vntlib.h"
KEY uint256 count = 0;
EVENT EVENT_GETFINALCOUNT(uint256 count);
constructor While6(){
}
UNMUTABLE
uint32 getFinalCount() {
uint256 x = 100;
uint256 res = U256SafeAdd(x, x);
uint32 result = test(res * random(), res);
return result;
}
MUTABLE
uint64 test(uint32 a, uint32 b) {
PrintStr("while", "while")
while (b < a) {
count++;
a -= b;
}
return count
}
uint64 random()
{
uint64 time = GetTimestamp();
PrintUint64T("get time", time);
string time_sha3 = SHA3(SHA3(SHA3(FromU64(time))));
PrintStr("get time sha3", time_sha3);
uint64 index = time % 63 + 2;
PrintUint64T("get index", index);
uint64 gas = GetGas() % 64 + 2;
PrintUint64T("get gas", gas);
uint64 random_a = (uint64)time_sha3[index];
PrintUint64T("get random_a", random_a);
uint64 random_b = (uint64)time_sha3[index + 1];
PrintUint64T("get random_b", random_b);
uint64 random_c = random_a * random_b * gas % 101;
PrintUint64T("get result", random_c);
return random_c;
}
0
---------------------------------
1191 loopfor444.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint256 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint256 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint256 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1192 loopfor444.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint256 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint256 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint256 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1193 loopfor444.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint256 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint256 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint256 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1194 loopfor444.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For4(){
}
MUTABLE
uint256 test1() {
for(uint16 i = 0; i < 1000000000; i++) {
count++;
PrintStr("uint16:", "uint16 < 1000000000");
}
return count;
}
MUTABLE
uint256 test2() {
PrintStr("test3()", "test3()");
return test3();
}
MUTABLE
uint256 test3() {
uint32 res = test1();
while(res != 0) {
res--;
count += res;
}
return count;
}
_() {
test3();
}
1
---------------------------------
1195 loopfallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1196 loopfallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1197 loopfallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1198 loopfallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1199 loopfallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
1
---------------------------------
1200 loopfallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
1
---------------------------------
1201 loopfallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
1
---------------------------------
1202 loopfallback55.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender());
return res;
}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
1
---------------------------------
1203 for555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (k = -1; k == 1; k++) {
count++;
}
PrintUint256T("count:", count)
return count;
}
void test2() {
PrinStr("test1()", "test1()");
test1();
}
0
---------------------------------
1204 for555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (k = -1; k == 1; k++) {
count++;
}
PrintUint256T("count:", count)
return count;
}
void test2() {
PrinStr("test1()", "test1()");
test1();
}
0
---------------------------------
1205 for555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (k = -1; k == 1; k++) {
count++;
}
PrintUint256T("count:", count)
return count;
}
void test2() {
PrinStr("test1()", "test1()");
test1();
}
0
---------------------------------
1206 for555.c
#include "vntlib.h"
KEY uint256 count;
constructor For5(){
}
MUTABLE
uint256 test1(){
for (k = -1; k == 1; k++) {
count++;
}
PrintUint256T("count:", count)
return count;
}
void test2() {
PrinStr("test1()", "test1()");
test1();
}
0
---------------------------------
1207 function_call6666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1208 function_call6666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1209 function_call6666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1210 function_call6666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1211 function_call6666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1212 function_call6666.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
void transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint128 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1213 function_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1214 function_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1215 function_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1216 function_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1217 function_call6.c
#include "vntlib.h"
KEY mapping (address, uint256) balances;
KEY string name;
KEY uint8 decimals;
KEY string symbol;
KEY address owner;
constructor Function6(uint256 _initialAmount, string, uint8 _decimalUnits, string _tokenSymbol){
address from = GetSender();
balances.key = from;
balances.value = _initialAmount;
name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}
MUTABLE
bool transfer(address _to, uint256 _value) {
address sender = GetSender();
balances.key = sender;
Require(balances.value >= _value, "balances > value");
balances.value -= _value;
balances.key = sender;
balances.value += _value;
SendFromContract(_to, _value);
balanceOf(_to);
balanceOf(sender);
return true;
}
MUTABLE
void test(address _to, uint256 _value) {
owner = GetSender();
if (owner != _to) {
transfer(_to, _value);
}
}
MUTABLE
uint256 balanceOf(address _owner) {
balances.key = _owner;
return balances.value;
}
0
---------------------------------
1218 loopwhile3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1219 loopwhile3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1220 loopwhile3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1221 loopwhile3333.c
#include "vntlib.h"
KEY uint128 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint128 test1(string s){
isDone = Equal(s, ss);
uint128 res = test2(isDone)
return res;
}
MUTABLE
uint128 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1222 while22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(){
while (count <= 100) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1223 while22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(){
while (count <= 100) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1224 while22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(){
while (count <= 100) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1225 while22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(){
while (count <= 100) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1226 while22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(){
while (count <= 100) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1227 while22222.c
#include "vntlib.h"
KEY uint16 count = 0;
constructor While2(){
}
MUTABLE
uint16 test1(){
while (count <= 100) {
count++;
PrintUint16T("count:", count);
}
return count;
}
0
---------------------------------
1228 fallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
MUTABLE
void test1(){
uint128 res = getRes(GetSender());
PrintUint128T("uint256", res);
}
_(){
test1();
}
0
---------------------------------
1229 fallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
MUTABLE
void test1(){
uint128 res = getRes(GetSender());
PrintUint128T("uint256", res);
}
_(){
test1();
}
0
---------------------------------
1230 fallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
MUTABLE
void test1(){
uint128 res = getRes(GetSender());
PrintUint128T("uint256", res);
}
_(){
test1();
}
0
---------------------------------
1231 fallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
MUTABLE
void test1(){
uint128 res = getRes(GetSender());
PrintUint128T("uint256", res);
}
_(){
test1();
}
0
---------------------------------
1232 fallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
MUTABLE
void test1(){
uint128 res = getRes(GetSender());
PrintUint128T("uint256", res);
}
_(){
test1();
}
0
---------------------------------
1233 fallback5555.c
#include "vntlib.h"
KEY uint128 res = 100;
typedef struct fallback4 {
uint128 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5{}
uint128 getRes(address addr) {
accounts.key = addr;
uint128 balance = accounts.value.balance;
Require(balance > 0, "balance > 0");
while(balance > 0) {
res += balance;
}
return res;
}
MUTABLE
void test1(){
uint128 res = getRes(GetSender());
PrintUint128T("uint256", res);
}
_(){
test1();
}
0
---------------------------------
1234 loopfallback555.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1235 loopfallback555.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1236 loopfallback555.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1237 loopfallback555.c
#include "vntlib.h"
KEY uint256 res = 100;
typedef struct fallback4 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback5() {}
uint256 getRes(address addr) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
while(balance >= 0) {
res += balance;
}
return res;
}
_(){
getRes(GetSender());
}
1
---------------------------------
1238 while77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
1239 while77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
1240 while77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
1241 while77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
1242 while77777.c
#include "vntlib.h"
KEY uint16 count = 0;
EVENT EVENT_GETFINALCOUNT(uint16 count);
constructor While7(){
}
MUTABLE
uint16 test1(uint16 res) {
while(res == 100) {
count++;
}
EVENT_GETFINALCOUNT(count);
return count
}
UNMUTABLE
uint16 getFinalCount() {
uint16 x = 100;
uint16 res = U256SafeAdd(x, x);
return test1(res);
}
0
---------------------------------
1243 fallback33.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
1244 fallback33.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
1245 fallback33.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
1246 fallback33.c
#include "vntlib.h"
KEY address newOwner;
KEY address owner;
KEY uint256 MinDeposit
KEY mapping (address, uint) holders;
constructor $Fallback3(){
owner = GetSender();
}
void initTokenBank() {
owner = GetSender();
MinDeposit = 1;
}
MUTABLE
void $Deposit() {
if (GetValue() > MinDeposit) {
holders.key = GetSender();
holders.value += GetValue();
}
}
void WithdrawToHolder(address _addr, uint _amount) {
holders.key = addr
if(holders.value > 0) {
if(TransferFromContract(_addr, _amount) == true){
Holders.value -= _amount;
}
}
}
$_() {
$Deposit();
}
0
---------------------------------
1247 for7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
1248 for7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
1249 for7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
1250 for7.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For7(){
}
MUTABLE
uint32 test1(){
for (uint32 i = 1000; i > 0; i-=2) {
count++;
}
return count;
}
0
---------------------------------
1251 loopwhile3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1252 loopwhile3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1253 loopwhile3.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){
}
MUTABLE
uint32 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint32 test2(bool isDone){
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1254 while333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("test", "test");
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
1255 while333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("test", "test");
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
1256 while333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("test", "test");
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
1257 while333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("test", "test");
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
1258 while333.c
#include "vntlib.h"
KEY uint256 count = 0;
KEY string ss = "qian";
constructor While3(){}
MUTABLE
uint256 test1(string s){
isDone = Equal(s, ss);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint256 test2(bool isDone){
PrintStr("test", "test");
while(count < 3) {
if(isDone) {
count++;
continue;
}
count++;
}
return count;
}
0
---------------------------------
1259 loopwhile33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uin64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1260 loopwhile33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uin64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1261 loopwhile33.c
#include "vntlib.h"
KEY uint64 count = 0;
KEY string s1 = "qian";
constructor While3(){}
MUTABLE
uin64 test1(string s){
isDone = Equal(s, s1);
uint32 res = test2(isDone)
return res;
}
MUTABLE
uint64 test2(bool isDone){
PrintStr("while", "while")
while(count < 3) {
if(isDone) {
continue;
}
count++;
}
return count;
}
1
---------------------------------
1262 function_call99999.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:","recurrent");
}
MUTABLE
uint16 test1() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1263 function_call99999.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:","recurrent");
}
MUTABLE
uint16 test1() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1264 function_call99999.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:","recurrent");
}
MUTABLE
uint16 test1() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1265 function_call99999.c
#include "vntlib.h"
constructor Function5(){
PrintStr("recurrent times:","recurrent");
}
MUTABLE
uint16 test1() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test2(a, i);
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
PrintUint256T("a < i", a);
}
MUTABLE
void test3(uint256 a, uint256 i) {
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1266 loopfallback4444.c
#include "vntlib.h"
KEY uint128 count = U128(1000);
constructor Fallback4() {}
MUTABLE
uint128 test1(uint128 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint128 res = test1(count);
PrintUint128T("res", res);
}
1
---------------------------------
1267 loopfallback4444.c
#include "vntlib.h"
KEY uint128 count = U128(1000);
constructor Fallback4() {}
MUTABLE
uint128 test1(uint128 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint128 res = test1(count);
PrintUint128T("res", res);
}
1
---------------------------------
1268 loopfallback4444.c
#include "vntlib.h"
KEY uint128 count = U128(1000);
constructor Fallback4() {}
MUTABLE
uint128 test1(uint128 amount){
PrintStr("count", "amount")
for(uint8 i = 0; i< amount; i++) {
count += i;
}
return count
}
_(){
uint128 res = test1(count);
PrintUint128T("res", res);
}
1
---------------------------------
1269 function_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint16 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
1270 function_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint16 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
1271 function_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint16 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
1272 function_call44444.c
#include "vntlib.h"
constructor Test1(){}
CALL uint16 test2(CallParams params);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint16 test1(){
uint16 res = test2(params);
PrintUint16T("res:", res);
return res;
}
#include "vntlib.h"
constructor Test2(){}
MUTABLE
void test2() {
uint16 a = 20;
uint16 i = U256SafeMul(a, a)
while(i > a) {
a++;
}
}
0
---------------------------------
1273 fallback1.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
1274 fallback1.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
1275 fallback1.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
1276 fallback1.c
#include "vntlib.h"
KEY uint8 count = 10;
constructor Fallback1(){
}
CALL uint32 test(CallParams params, uint32 amount);
CallParams params = {Address("0xaaaa"), U256(10000), 100000};
MUTABLE
uint32 test1(uint8 amount){
test(param, amount)
return amount;
}
MUTABLE
uint32 test2(uint8 amount){
test1(amount)
uint32 res = amount + 1;
return res;
}
MUTABLE
void test3(){
string s = "Input data error";
PrintStr("ERROR:", s);
}
_(){
test3();
}
0
---------------------------------
1277 function_call111.c
#include "vntlib.h"
KEY uint64 count = 10;
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1278 function_call111.c
#include "vntlib.h"
KEY uint64 count = 10;
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1279 function_call111.c
#include "vntlib.h"
KEY uint64 count = 10;
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1280 function_call111.c
#include "vntlib.h"
KEY uint64 count = 10;
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1281 function_call111.c
#include "vntlib.h"
KEY uint64 count = 10;
constructor Function1(){}
MUTABLE
uint64 test1(uint256 a){
uint64 v = a;
uint64 c = test2(a, v)
return c;
}
MUTABLE
uint64 test2(uint256 b, uint256 c){
uint64 e = U256SafeAdd(b, c);
uint64 res = test3(e);
return res;
}
MUTABLE
uint64 test3(uint256 a){
uint64 res = U256SafeMul(a, count);
return res;
}
0
---------------------------------
1282 loopfallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
1283 loopfallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
1284 loopfallback77777.c
#include "vntlib.h"
KEY uint16 amount = 100;
typedef struct fallback7 {
uint16 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
void test1(){
getRes(GetSender(), amount);
}
uint16 getRes(address addr, uint16 amount) {
accounts.key = addr;
uint16 balance = accounts.value.balance;
uint16 res = U256SafeAdd(balance, amount);
return res;
}
_(){
while(true){
test1();
}
}
1
---------------------------------
1285 loopfunction_call999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return a;
}
1
---------------------------------
1286 loopfunction_call999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return a;
}
1
---------------------------------
1287 loopfunction_call999.c
#include "vntlib.h"
constructor Function5(){}
MUTABLE
uint256 test1(){
uint256 res = test2();
PrintUint256T("recurrent times:", res);
return res;
}
MUTABLE
uint256 test2() {
uint256 a = 20;
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
test3(a, i);
return i;
}
MUTABLE
uint256 test3(uint256 a, uint256 i) {
Assert(a < i, "require a < i");
if (a >= i) {
Revert("require a < i");
}
test1();
return a;
}
1
---------------------------------
1288 fallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(){
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
1289 fallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(){
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
1290 fallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(){
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
1291 fallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(){
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
1292 fallback2.c
#include "vntlib.h"
KEY string s = "fallback";
constructor Fallback2(){}
MUTABLE
uint32 test1(){
uint32 amount = 100;
uint32 res = U256SafeAdd(amount, amount);
return res;
}
_(){
PrintStr("count:", s);
}
0
---------------------------------
1293 function_call22222.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function2(){}
MUTABLE
uint16 test1(uint16 a){
uint16  v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1294 function_call22222.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function2(){}
MUTABLE
uint16 test1(uint16 a){
uint16  v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1295 function_call22222.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function2(){}
MUTABLE
uint16 test1(uint16 a){
uint16  v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1296 function_call22222.c
#include "vntlib.h"
KEY uint16 count = 10;
constructor Function2(){}
MUTABLE
uint16 test1(uint16 a){
uint16  v = a;
uint16 c = test2(a, v)
return c;
}
MUTABLE
uint16 test2(uint16 b, uint16 c){
uint16 e = U256SafeAdd(b, c);
uint16 res = U256SafeSub(e, count);
return res;
}
0
---------------------------------
1297 fallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
1298 fallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
1299 fallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
1300 fallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
1301 fallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
1302 fallback77.c
#include "vntlib.h"
KEY uint256 amount = 100;
typedef struct fallback7 {
uint256 balance;
string nickName;
} Account;
KEY mapping(address, Account) accounts;
constructor Fallback7() {}
MUTABLE
uint256 test1(){
uint256 res = getRes(GetSender(), amount);
return res;
}
uint256 getRes(address addr, uint32 amount) {
accounts.key = addr;
uint256 balance = accounts.value.balance;
uint32 res = U256SafeAdd(balance, amount);
return res;
}
_(){
uint256 res = test1();
PrintUint256T("uint256", res);
}
0
---------------------------------
1303 for3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
1304 for3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
1305 for3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
1306 for3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
1307 for3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
1308 for3.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor For3(){
}
MUTABLE
uint32 test1(){
for(int32 i = 10; i < 100; i++) {
count++;
PrintUint256T("count:", count);
}
return count;
}
0
---------------------------------
1309 function_call999.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
PrintStr("call test1()", "call test1()");
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1310 function_call999.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
PrintStr("call test1()", "call test1()");
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1311 function_call999.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
PrintStr("call test1()", "call test1()");
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1312 function_call999.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
PrintStr("call test1()", "call test1()");
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1313 function_call999.c
#include "vntlib.h"
constructor Function5(){
PrintUint256T("recurrent times:", res);
}
MUTABLE
uint64 test1() {
uint256 a = 20;
PrintUint256T("a:", a);
uint256 i = U256SafeMul(a, a);
Require(i > a, "i > a");
return i;
}
MUTABLE
void test2(uint256 a, uint256 i) {
PrintStr("call test1()", "call test1()");
if (a >= i) {
Revert("require a < i");
}
test1();
}
0
---------------------------------
1314 while1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
1315 while1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
1316 while1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
1317 while1.c
#include "vntlib.h"
KEY uint256 count = 0;
constructor While1(){
}
MUTABLE
uint32 test1(uint256 x){
count = x;
while (count < 100) {
count++;
}
return count;
}
0
---------------------------------
